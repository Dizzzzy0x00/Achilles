input,label
"public void SOK7D2V ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
public void XRFMKH5 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 6QNY5MMG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void U8JW262B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void 3SWHMUC ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void J36UVN7G2B1 ( ) throws Throwable { String password ; if ( false ) { password = null ; } else { password = ""Password1234!"" ; } if ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 81WVK6OG2B2 ( ) throws Throwable { String password ; if ( true ) { password = ""Password1234!"" ; } else { password = null ; } if ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 72WZ2TLB2G1 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( false ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void QE8YVPSB2G2 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 7840F9W ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void GM5MGVD ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void 3LL1PU1G2B1 ( ) throws Throwable { String password ; if ( 5 != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( 5 == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 95RCX8WG2B2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( 5 == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void BGRZM6GB2G1 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void EQYVA01B2G2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 5V8SNZ0 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void YRBJ5L8 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void MQVRX02G2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void YTP9RBSG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 9XLBALYB2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void W54JMCZB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void LQ8YRR7 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void RJ4645F ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void YP8PAR3G2B1 ( ) throws Throwable { String password ; if ( privateFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void HRSJWHYG2B2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void RMEJA5RB2G1 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void G4N23IJB2G2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 8XPNBL6 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 8M6DJ0P ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void ATXE3FDG2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 8SM9TXYG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 9QI3SRZB2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void 6K1TIYWB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void W86II2S ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void EBPXDV3 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void 06N7I2WG2B1 ( ) throws Throwable { String password ; if ( privateFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void QWRF3V7G2B2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 786YO9PB2G1 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void 3W3MUO3B2G2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void THN55B4 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void AFHGF1C ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void M8X2ZH7G2B1 ( ) throws Throwable { String password ; if ( privateReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 39WTVLCG2B2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void NAELVRLB2G1 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void L0SYOFKB2G2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 9N7EPM1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void ESU88P1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void R20L6FBG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void QPQMOARG2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void D9BYV7UB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void 8MS3BTFB2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void P6SET69 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 9CIA4CW ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void 0TVRCTTG2B1 ( ) throws Throwable { String password ; if ( IO . staticFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void KAU8G4FG2B2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void NJSQVQSB2G1 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void 6L1O0XKB2G2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 0B24RX4 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void UXA6IGS ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void M4A43NTG2B1 ( ) throws Throwable { String password ; if ( IO . staticReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void EKM70P8G2B2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void WHL90CRB2G1 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void LACR1QFB2G2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 9C5Q1GW ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void EVSIU2V ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",1
"private void UMSQEIUG2B ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = ""Password1234!"" ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 4VT8ADNB2G ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 0CWFOI3 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void KL4DKDS ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void 47CBGYEG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void EFVDCV0G2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void QX2KNLSB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void 73BLKBTB2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 5MZ90NN ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 66YYKRD ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void PTOV1DTG2B1 ( ) throws Throwable { String password ; if ( IO . staticFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void Y2VFIOAG2B2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void O4BGO6GB2G1 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void K5J28V1B2G2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void CQ7AJVA ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 0TOVX62 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",1
"private void GXFMTXHG2B1 ( ) throws Throwable { String password ; switch ( 5 ) { case 6 : password = null ; break ; default : password = ""Password1234!"" ; break ; } switch ( 7 ) { case 7 : Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void LXK5IO9G2B2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = ""Password1234!"" ; break ; default : password = null ; break ; } switch ( 7 ) { case 7 : Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void J1JBFTEB2G1 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 8 ) { case 7 : IO . writeLine ( ""Benign, fixed string"" ) ; break ; default : if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } break ; } }",0
"private void UCB2PXXB2G2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
public void I3RV3EW ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void CWE6PM2 ( ) throws Throwable { String password ; while ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; } while ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; } }",1
"private void JUKZNO3G2B ( ) throws Throwable { String password ; while ( true ) { password = ""Password1234!"" ; break ; } while ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; } }",0
"private void SVDJU0YB2G ( ) throws Throwable { String password ; while ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } break ; } }",0
public void 9FBYK3F ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void 725WTG5 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j ++ ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void JPGIQGSG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; for ( int j = 0 ; j < 1 ; j ++ ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 6E0YG2SB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } for ( int k = 0 ; k < 1 ; k ++ ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 4GP7UEI ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void 6G8DB3I ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badPrivate = true ; badSink ( password ) ; }",1
"private void DV0KITDSink ( String password ) throws Throwable { if ( badPrivate ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
public void RN7XO19 ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void UJOEROJB2G1 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G1Private = false ; goodB2G1Sink ( password ) ; }",0
"private void C1WLQIMB2G1Sink ( String password ) throws Throwable { if ( goodB2G1Private ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void LO2LX4VB2G2 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G2Private = true ; goodB2G2Sink ( password ) ; }",0
"private void 4SBXQFJB2G2Sink ( String password ) throws Throwable { if ( goodB2G2Private ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void ZTDHE4YG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BPrivate = true ; goodG2BSink ( password ) ; }",0
"private void 03DTCMYG2BSink ( String password ) throws Throwable { if ( goodG2BPrivate ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void BQAR7TS ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_22b ( ) ) . badSink ( password ) ; }",1
public void U4DTEVC ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void QLRQZPJB2G1 ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G1PublicStatic = false ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_22b ( ) ) . goodB2G1Sink ( password ) ; }",0
"private void 0AA761VB2G2 ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G2PublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_22b ( ) ) . goodB2G2Sink ( password ) ; }",0
"private void GWXMGUOG2B ( ) throws Throwable { String password = null ; password = ""Password1234!"" ; goodG2BPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_22b ( ) ) . goodG2BSink ( password ) ; }",0
"public void ATJR1FCSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_22a . badPublicStatic ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { password = null ; } }",1
"public void 9DZFD1OB2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"public void 1LD49TZB2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_22a . goodB2G2PublicStatic ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { password = null ; } }",0
"public void ELI36MWG2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_22a . goodG2BPublicStatic ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { password = null ; } }",0
"public void A5BXTR4 ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
public void N7WE4Z5 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void VOH9VVBG2B ( ) throws Throwable { String passwordCopy ; { String password ; password = ""Password1234!"" ; passwordCopy = password ; } { String password = passwordCopy ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void BPYGER7B2G ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void C8UO1TMSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void K02OYOV ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badSink ( password ) ; }",1
public void YSE3VIC ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void R9HB1NAG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void N8CIK3PG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BSink ( password ) ; }",0
"private void VD42T2RB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void ECPCZYUB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2GSink ( password ) ; }",0
"private String KQ640ANSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",1
"public void Y8FDQT5 ( ) throws Throwable { String password = badSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"private String EN926BYG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"private void OTA9FEXG2B ( ) throws Throwable { String password = goodG2BSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private String ITH8TCUB2GSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",0
"private void ZA55MG4B2G ( ) throws Throwable { String password = goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
public void 3OYZRA3 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void SET8DIKSink ( ) throws Throwable { String password = passwordBad ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 3ORO9YK ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordBad = password ; badSink ( ) ; }",1
public void FJOVX60 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void NJ80HWLG2BSink ( ) throws Throwable { String password = passwordGoodG2B ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void HO3ZZTMG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; passwordGoodG2B = password ; goodG2BSink ( ) ; }",0
"private void 9WGY5UGB2GSink ( ) throws Throwable { String password = passwordGoodB2G ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 2XI7SQSB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordGoodB2G = password ; goodB2GSink ( ) ; }",0
"public void IJ949M8 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_51b ( ) ) . badSink ( password ) ; }",1
public void W8279RP ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void QCVPU8AG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_51b ( ) ) . goodG2BSink ( password ) ; }",0
"private void ZLN6RF8B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_51b ( ) ) . goodB2GSink ( password ) ; }",0
"public void H2QE1H7Sink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void PJ1NAAFG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void SR9ZD5YB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void 6I7QHF4 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_52b ( ) ) . badSink ( password ) ; }",1
public void X5GDJ0D ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void UCN2EJPG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_52b ( ) ) . goodG2BSink ( password ) ; }",0
"private void L59W90BB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_52b ( ) ) . goodB2GSink ( password ) ; }",0
public void OGRDWV2Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_52c ( ) ) . badSink ( password ) ; },1
public void OMHRVKNG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_52c ( ) ) . goodG2BSink ( password ) ; },0
public void RVAEL6WB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void X6TZEE0Sink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void JOB9I08G2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 982FYJGB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void F2DSQPM ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53b ( ) ) . badSink ( password ) ; }",1
public void 8CIKK0P ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void HTFR8GYG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53b ( ) ) . goodG2BSink ( password ) ; }",0
"private void RHK29XZB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53b ( ) ) . goodB2GSink ( password ) ; }",0
public void 3U3IPFDSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53c ( ) ) . badSink ( password ) ; },1
public void ZPBB4A5G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53c ( ) ) . goodG2BSink ( password ) ; },0
public void IDV8MYJB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53c ( ) ) . goodB2GSink ( password ) ; },0
public void X7JMADKSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53d ( ) ) . badSink ( password ) ; },1
public void A4J1HBCG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53d ( ) ) . goodG2BSink ( password ) ; },0
public void 9AMNP08B2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void WOLNTR9Sink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void O2AJZH8G2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void AYXEV47B2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void XSF3AD1 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54b ( ) ) . badSink ( password ) ; }",1
public void 1K1AIVW ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void TGIGQJ4G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54b ( ) ) . goodG2BSink ( password ) ; }",0
"private void RHTZEYUB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54b ( ) ) . goodB2GSink ( password ) ; }",0
public void H3K5LU9Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54c ( ) ) . badSink ( password ) ; },1
public void K9J06P4G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54c ( ) ) . goodG2BSink ( password ) ; },0
public void QJ8MLJSB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54c ( ) ) . goodB2GSink ( password ) ; },0
public void UX1PRJSSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54d ( ) ) . badSink ( password ) ; },1
public void 8ZDUSYVG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54d ( ) ) . goodG2BSink ( password ) ; },0
public void E31NWNUB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54d ( ) ) . goodB2GSink ( password ) ; },0
public void HD6ZSB8Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54e ( ) ) . badSink ( password ) ; },1
public void S5VU7YNG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54e ( ) ) . goodG2BSink ( password ) ; },0
public void TKSWJZOB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void 1KOW23USink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void RTYKI6YG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 94RAHMSB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void K77SPDZ ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_61b ( ) ) . badSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
public void C1FEW69 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 3Q440G7G2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_61b ( ) ) . goodG2BSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void LHSKTQEB2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public String RT9PG3YSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",1
"public String 401ILBOG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"public String TXNFXE9B2GSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",0
"public void JW4FDVR ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_66b ( ) ) . badSink ( passwordArray ) ; }",1
public void 0SOL9LW ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void TT2MW18G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_66b ( ) ) . goodG2BSink ( passwordArray ) ; }",0
"private void T74KQHRB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_66b ( ) ) . goodB2GSink ( passwordArray ) ; }",0
"public void W7SAQDDSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void X9TPJX1G2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void D6L7IFYB2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void FNX5NMH ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_67b ( ) ) . badSink ( passwordContainer ) ; }",1
public void 2GQTYPT ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void L9DT76TG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_67b ( ) ) . goodG2BSink ( passwordContainer ) ; }",0
"private void ICMWQFBB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_67b ( ) ) . goodB2GSink ( passwordContainer ) ; }",0
"public void NLN2GIGSink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 5AJ49EEG2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 9R7SYWZB2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void YNXRVH4 ( ) throws Throwable { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_68b ( ) ) . badSink ( ) ; }",1
public void MCNEQ02 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void ZP4FI3UG2B ( ) throws Throwable { password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_68b ( ) ) . goodG2BSink ( ) ; }",0
"private void GIIY557B2G ( ) throws Throwable { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_68b ( ) ) . goodB2GSink ( ) ; }",0
"public void 3FJBXRESink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_68a . password ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void BVMA6H3G2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_68a . password ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void PFIRJB8B2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_68a . password ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void LR0NDEI ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_71b ( ) ) . badSink ( ( Object ) password ) ; }",1
public void 718BMO1 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void W46V4KGG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_71b ( ) ) . goodG2BSink ( ( Object ) password ) ; }",0
"private void 77OEBQXB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_71b ( ) ) . goodB2GSink ( ( Object ) password ) ; }",0
"public void TUAH527Sink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void ITLMJJ0G2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void D7MOCYLB2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void 027RIGW ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_72b ( ) ) . badSink ( passwordVector ) ; }",1
public void X9O7X2J ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 88844GSG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_72b ( ) ) . goodG2BSink ( passwordVector ) ; }",0
"private void O0NGVD3B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_72b ( ) ) . goodB2GSink ( passwordVector ) ; }",0
"public void YYLRF97Sink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 6LYUTZUG2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void A7TYF09B2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void FZQHPEM ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_73b ( ) ) . badSink ( passwordLinkedList ) ; }",1
public void K1M0UOA ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 7PVVCP5G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_73b ( ) ) . goodG2BSink ( passwordLinkedList ) ; }",0
"private void FX2UZZMB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_73b ( ) ) . goodB2GSink ( passwordLinkedList ) ; }",0
"public void N0X5493Sink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void B15CYGOG2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 9JOBXF3B2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void 711WZJC ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_74b ( ) ) . badSink ( passwordHashMap ) ; }",1
public void R9OUC6O ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void TQQ6DLZG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_74b ( ) ) . goodG2BSink ( passwordHashMap ) ; }",0
"private void 6WHIHQ6B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_74b ( ) ) . goodB2GSink ( passwordHashMap ) ; }",0
"public void SH6M3ZPSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void XZDYGAVG2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void RI75RAOB2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void JO6EDYJ ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_75b ( ) ) . badSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void 0BLP1HY ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 031YOZSG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_75b ( ) ) . goodG2BSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"private void F418G6OB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_75b ( ) ) . goodB2GSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void KECWK0XSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void OPYVV8XG2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void ZSXWGL1B2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void EBYWTGT ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_81_bad ( ) ; baseObject . action ( password ) ; }",1
public void PWOLUU8 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void LCSW027G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_81_goodG2B ( ) ; baseObject . action ( password ) ; }",0
"private void 9VB88AIB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_driverManager_81_goodB2G ( ) ; baseObject . action ( password ) ; }",0
"public void MBBGGJM ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
public void N88WD18 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void DUUBVJVG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void K8MZGBSB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void O2J1JAI ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void JG5H18IG2B1 ( ) throws Throwable { String password ; if ( false ) { password = null ; } else { password = ""Password1234!"" ; } if ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 08A1UE9G2B2 ( ) throws Throwable { String password ; if ( true ) { password = ""Password1234!"" ; } else { password = null ; } if ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void GGF7K8HB2G1 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( false ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void S9XPYXVB2G2 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void TWDRHVI ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void LHFXVNO ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void ABX31UNG2B1 ( ) throws Throwable { String password ; if ( 5 != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( 5 == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 8M49NZWG2B2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 13YTQ0IB2G1 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 1K0Q8GGB2G2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void D9JLEAG ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void JHM24QA ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 32KQZQJG2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void XZKUQDZG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void U8XD4AZB2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void OF940LIB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void ZMG3OGI ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 8P84FDR ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void N52URVLG2B1 ( ) throws Throwable { String password ; if ( privateFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void V5O8OYQG2B2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void Y3VH5ERB2G1 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 9LDRR55B2G2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void UZBXRPE ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void ARY0ANQ ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void RCDJ273G2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void DWC6I2MG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void RRG7HWKB2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void GRLIIB4B2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void BAFQEJL ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void TBZWPO1 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void EKL22A3G2B1 ( ) throws Throwable { String password ; if ( privateFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void W98NM60G2B2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 76X8TCIB2G1 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void YB3IAM5B2G2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void 31ZACAS ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void VCA3OZS ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 9K91WPBG2B1 ( ) throws Throwable { String password ; if ( privateReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void MJEBJMXG2B2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void RQPXBDQB2G1 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 4E9BZZVB2G2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void D453EFS ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void VLBNOWW ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void YLOFHIMG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void KI6QR0NG2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void ZQ5FP5HB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 38O9LE9B2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void U7GCMYQ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void TKRZ5T2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 1XQ2QCKG2B1 ( ) throws Throwable { String password ; if ( IO . staticFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 3M9FVV3G2B2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void ZV1AW9XB2G1 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void NPGNIJAB2G2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void YMJCZOR ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void NA6CSSO ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 9NFNGI2G2B1 ( ) throws Throwable { String password ; if ( IO . staticReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 47DE8D8G2B2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void DYBW0ZTB2G1 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 28VCANSB2G2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void BKK8C37 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void ANZKBZP ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 6L5B29YG2B ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = ""Password1234!"" ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void Q3C98WMB2G ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void WA1VF9G ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void J9T661D ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 2Z2RNTNG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void BTXBF79G2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void XPXH8LCB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void VF7S9QKB2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void R2J1BMD ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void CSXL1ZP ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void X8J2RR8G2B1 ( ) throws Throwable { String password ; if ( IO . staticFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void KCAFA6LG2B2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void OIETWW8B2G1 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void TA6SL12B2G2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void J0S5I77 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void EEF2S3P ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",1
"private void VVY0DIHG2B1 ( ) throws Throwable { String password ; switch ( 5 ) { case 6 : password = null ; break ; default : password = ""Password1234!"" ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void MP74RC4G2B2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = ""Password1234!"" ; break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void VJ59TYBB2G1 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 8 ) { case 7 : IO . writeLine ( ""Benign, fixed string"" ) ; break ; default : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; } }",0
"private void VZ3I0Y5B2G2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
public void MJFER0X ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void XJUE5JL ( ) throws Throwable { String password ; while ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; } }",1
"private void HOHKV3XG2B ( ) throws Throwable { String password ; while ( true ) { password = ""Password1234!"" ; break ; } while ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; } }",0
"private void VMX3NUVB2G ( ) throws Throwable { String password ; while ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; } }",0
public void 4QCPJ4J ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void CF3TYUF ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j ++ ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void CDSCGY5G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; for ( int j = 0 ; j < 1 ; j ++ ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void P5QXXW8B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } for ( int k = 0 ; k < 1 ; k ++ ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void G7QFG6T ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void TUYFPO8 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badPrivate = true ; badSink ( password ) ; }",1
"private void 80D3VKZSink ( String password ) throws Throwable { if ( badPrivate ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
public void 59LKNQA ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void CQRSE34B2G1 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G1Private = false ; goodB2G1Sink ( password ) ; }",0
"private void CDHI6YHB2G1Sink ( String password ) throws Throwable { if ( goodB2G1Private ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 4OFHDNZB2G2 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G2Private = true ; goodB2G2Sink ( password ) ; }",0
"private void Z0F0B1IB2G2Sink ( String password ) throws Throwable { if ( goodB2G2Private ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 2YLT2TQG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BPrivate = true ; goodG2BSink ( password ) ; }",0
"private void IYGEJMAG2BSink ( String password ) throws Throwable { if ( goodG2BPrivate ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"public void 8XMQZIM ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_22b ( ) ) . badSink ( password ) ; }",1
public void 5ZGCQ24 ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void 8X44JSIB2G1 ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G1PublicStatic = false ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_22b ( ) ) . goodB2G1Sink ( password ) ; }",0
"private void TSKWBSMB2G2 ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G2PublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_22b ( ) ) . goodB2G2Sink ( password ) ; }",0
"private void 8KSM9AWG2B ( ) throws Throwable { String password = null ; password = ""Password1234!"" ; goodG2BPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_22b ( ) ) . goodG2BSink ( password ) ; }",0
"public void QDD0TR7Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_22a . badPublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",1
"public void K473L4KB2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"public void EA4S998B2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_22a . goodB2G2PublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",0
"public void T05FUA3G2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_22a . goodG2BPublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",0
"public void VB0Y52N ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
public void VKCS006 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 0XS9HS2G2B ( ) throws Throwable { String passwordCopy ; { String password ; password = ""Password1234!"" ; passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 03C4TYHB2G ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void XHW6UQSSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void EPF80PY ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badSink ( password ) ; }",1
public void T76O22P ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 0HDGHKZG2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void PHHEOWHG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BSink ( password ) ; }",0
"private void I59TSNXB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void 8BKBTUVB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2GSink ( password ) ; }",0
"private String 5DWVQNYSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",1
"public void L0JZYRZ ( ) throws Throwable { String password = badSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"private String ETDI2DAG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"private void 0J92GKWG2B ( ) throws Throwable { String password = goodG2BSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private String HU89FJZB2GSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",0
"private void 6NYTQO8B2G ( ) throws Throwable { String password = goodB2GSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
public void 9AC1HFT ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void BJ18K05Sink ( ) throws Throwable { String password = passwordBad ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 4Y3XJBK ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordBad = password ; badSink ( ) ; }",1
public void NQMPM37 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 4N3PRDBG2BSink ( ) throws Throwable { String password = passwordGoodG2B ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void 4OWCCU8G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; passwordGoodG2B = password ; goodG2BSink ( ) ; }",0
"private void RQW6JCXB2GSink ( ) throws Throwable { String password = passwordGoodB2G ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void 2SOF4PJB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordGoodB2G = password ; goodB2GSink ( ) ; }",0
"public void 5YVWOMD ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_51b ( ) ) . badSink ( password ) ; }",1
public void X2TCE58 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 8C51FQUG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_51b ( ) ) . goodG2BSink ( password ) ; }",0
"private void 9IRHPOOB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_51b ( ) ) . goodB2GSink ( password ) ; }",0
"public void GNZ0ZRBSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void ZVKQDS2G2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void WYPUEOCB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void V20BZGG ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_52b ( ) ) . badSink ( password ) ; }",1
public void LBDX2NZ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void B6S9QPDG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_52b ( ) ) . goodG2BSink ( password ) ; }",0
"private void MHH3DIYB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_52b ( ) ) . goodB2GSink ( password ) ; }",0
public void 5J8XVE5Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_52c ( ) ) . badSink ( password ) ; },1
public void O6YBTLPG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_52c ( ) ) . goodG2BSink ( password ) ; },0
public void AWHM7DEB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void A638E9VSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void G1RZLTGG2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void USUNS9LB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 3FEBNET ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53b ( ) ) . badSink ( password ) ; }",1
public void Z5MHV0Y ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 4LYHL8JG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53b ( ) ) . goodG2BSink ( password ) ; }",0
"private void Q2UW6OTB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53b ( ) ) . goodB2GSink ( password ) ; }",0
public void AMZKDFZSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53c ( ) ) . badSink ( password ) ; },1
public void G32B3YKG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53c ( ) ) . goodG2BSink ( password ) ; },0
public void 841Q1ZLB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53c ( ) ) . goodB2GSink ( password ) ; },0
public void VEOVIJ5Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53d ( ) ) . badSink ( password ) ; },1
public void NUACA49G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53d ( ) ) . goodG2BSink ( password ) ; },0
public void 1WMK1LHB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void 82APCO3Sink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void YX1VTEDG2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void LI9RNZXB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void FTNSC28 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54b ( ) ) . badSink ( password ) ; }",1
public void VS16UFZ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 8Q6WROXG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54b ( ) ) . goodG2BSink ( password ) ; }",0
"private void H9FI5NIB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54b ( ) ) . goodB2GSink ( password ) ; }",0
public void UGLN95BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54c ( ) ) . badSink ( password ) ; },1
public void 4VWRNWBG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54c ( ) ) . goodG2BSink ( password ) ; },0
public void 72KCXZAB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54c ( ) ) . goodB2GSink ( password ) ; },0
public void 6DAEC7OSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54d ( ) ) . badSink ( password ) ; },1
public void FVAN2D9G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54d ( ) ) . goodG2BSink ( password ) ; },0
public void 7GOVS0FB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54d ( ) ) . goodB2GSink ( password ) ; },0
public void EFCKGRUSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54e ( ) ) . badSink ( password ) ; },1
public void 7XMG5M2G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54e ( ) ) . goodG2BSink ( password ) ; },0
public void Q78EW9ZB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void G5I1Q4TSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void MNN3394G2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void SP3Y8IFB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void O1OYZVB ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_61b ( ) ) . badSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
public void B3SAGM9 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 4X4I5FCG2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_61b ( ) ) . goodG2BSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void KA32SI1B2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public String 57AGTILSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",1
"public String YVMWPIHG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"public String 0RRDVMHB2GSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",0
"public void HIMDYI1 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_66b ( ) ) . badSink ( passwordArray ) ; }",1
public void 69W6VJ2 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 6KWZ52AG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_66b ( ) ) . goodG2BSink ( passwordArray ) ; }",0
"private void LNZSGMMB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_66b ( ) ) . goodB2GSink ( passwordArray ) ; }",0
"public void SQSMK9YSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void GD1ODHHG2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 2I7NW39B2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void SAZHI6O ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67b ( ) ) . badSink ( passwordContainer ) ; }",1
public void KADEBK7 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void D64CDKWG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67b ( ) ) . goodG2BSink ( passwordContainer ) ; }",0
"private void RSP7WJDB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67b ( ) ) . goodB2GSink ( passwordContainer ) ; }",0
"public void CLZA3LBSink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 61C0XXDG2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void RLH1BJ2B2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void H7FAF8O ( ) throws Throwable { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_68b ( ) ) . badSink ( ) ; }",1
public void PYU9S81 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 20HCGYTG2B ( ) throws Throwable { password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_68b ( ) ) . goodG2BSink ( ) ; }",0
"private void 98P80STB2G ( ) throws Throwable { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_68b ( ) ) . goodB2GSink ( ) ; }",0
"public void CCRUU25Sink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void DLEV3F8G2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void OBSSJB2B2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void E184M48 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_71b ( ) ) . badSink ( ( Object ) password ) ; }",1
public void WTDMD65 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void KBJ20D5G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_71b ( ) ) . goodG2BSink ( ( Object ) password ) ; }",0
"private void FOS1FYDB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_71b ( ) ) . goodB2GSink ( ( Object ) password ) ; }",0
"public void SVSG5S9Sink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void LS8U0D1G2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void DS4NDT5B2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void US1GFYN ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_72b ( ) ) . badSink ( passwordVector ) ; }",1
public void 22Y5JU0 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void RUX65ZPG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_72b ( ) ) . goodG2BSink ( passwordVector ) ; }",0
"private void QZZ63EMB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_72b ( ) ) . goodB2GSink ( passwordVector ) ; }",0
"public void VOSQ9IJSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void CZ6O3VQG2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void S22TG5YB2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void Z4CKCF3 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_73b ( ) ) . badSink ( passwordLinkedList ) ; }",1
public void I2RETR6 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void ORUB6JYG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_73b ( ) ) . goodG2BSink ( passwordLinkedList ) ; }",0
"private void IBEJVVTB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_73b ( ) ) . goodB2GSink ( passwordLinkedList ) ; }",0
"public void N7S450VSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void OELQG9LG2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 0R6PT6JB2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void LH27J37 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_74b ( ) ) . badSink ( passwordHashMap ) ; }",1
public void UYYDRWE ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void SD3PJC2G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_74b ( ) ) . goodG2BSink ( passwordHashMap ) ; }",0
"private void IVOOBY6B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_74b ( ) ) . goodB2GSink ( passwordHashMap ) ; }",0
"public void JY5LA7PSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void GF1FCNKG2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 92URHDKB2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void FCO4CH6 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_75b ( ) ) . badSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void KNBJUK7 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void PIYQLULG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_75b ( ) ) . goodG2BSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"private void BDS224RB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_75b ( ) ) . goodB2GSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void XC18EXISink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void D6OFNNKG2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void SGE1CG3B2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void Y6HT7VN ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_81_bad ( ) ; baseObject . action ( password ) ; }",1
public void 0Y6336A ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 9FYYA2SG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_81_goodG2B ( ) ; baseObject . action ( password ) ; }",0
"private void 7V0DDOTB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_81_goodB2G ( ) ; baseObject . action ( password ) ; }",0
"public void CNGKZFA ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
public void 2O8KWLE ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void DGLCL0GG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void PV3NAA5B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void D6ILH3M ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 3PSWBWYG2B1 ( ) throws Throwable { String password ; if ( false ) { password = null ; } else { password = ""Password1234!"" ; } if ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void ZBV8ANNG2B2 ( ) throws Throwable { String password ; if ( true ) { password = ""Password1234!"" ; } else { password = null ; } if ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void YEM2DGMB2G1 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( false ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void L2CIARWB2G2 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void G6TKCTG ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void WGX8HDJ ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void EZ5IZ1KG2B1 ( ) throws Throwable { String password ; if ( 5 != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( 5 == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void HQHB33PG2B2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 8QQHBSSB2G1 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void I6IB03SB2G2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void VNHTOEQ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void IGFIMY1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 2F26IZ8G2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void NSCM22OG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void TVGKPX3B2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void MKYM2ZWB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void HWX8FZU ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void HLVDE0N ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 60W4V3FG2B1 ( ) throws Throwable { String password ; if ( privateFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 2ZZ62VEG2B2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void ZN3TVA8B2G1 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void WPGKV3GB2G2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void T8VIN4R ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void EXV5JOC ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void RK0TO1IG2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 6EDNKRRG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void DJMRPKYB2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void LFBTZ3DB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void C1YXMTP ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void ZJZ8QPQ ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void RWGKP33G2B1 ( ) throws Throwable { String password ; if ( privateFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void D7ISWLCG2B2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void WX15524B2G1 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void O7UVXURB2G2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void QPWB3M0 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void ZLIIHFP ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void S03SLI4G2B1 ( ) throws Throwable { String password ; if ( privateReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void E24NEYRG2B2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 1I08NIRB2G1 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void VMFNM4AB2G2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void S8ZHCTR ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void W85T0NR ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void SIV7G7EG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 7M72UAUG2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void Y0NA8RKB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void YGFHK72B2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void XMON3YI ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void G1A63Y2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void JHBOQU5G2B1 ( ) throws Throwable { String password ; if ( IO . staticFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 8N0YWLCG2B2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void YXZDXYLB2G1 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void GDG6AWKB2G2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void E6PRZLN ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void PC6C6KF ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 0ITRPM8G2B1 ( ) throws Throwable { String password ; if ( IO . staticReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void B3LTG3TG2B2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void ULZWY3NB2G1 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void UD2DYE7B2G2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void 2C74WNA ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 0L8P7WA ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void GU2YPAAG2B ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = ""Password1234!"" ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 1CG99T4B2G ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void D7MARB8 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void 7SCYY81 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 5U9DYCOG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 9AIBDKRG2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void JD0O31ZB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void IUPI4RSB2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void P9ZW9ZN ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void M3BJASH ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void C6D1H9UG2B1 ( ) throws Throwable { String password ; if ( IO . staticFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void F9ASYLFG2B2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void G3D135BB2G1 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 6FZBT8PB2G2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void Q7YP3GM ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void RY963BB ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",1
"private void MX7HKWLG2B1 ( ) throws Throwable { String password ; switch ( 5 ) { case 6 : password = null ; break ; default : password = ""Password1234!"" ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void Z6MC96NG2B2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = ""Password1234!"" ; break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void H025I6XB2G1 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 8 ) { case 7 : IO . writeLine ( ""Benign, fixed string"" ) ; break ; default : if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; } }",0
"private void W2VG7YBB2G2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
public void L1V99JP ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void YUE9DGO ( ) throws Throwable { String password ; while ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; } }",1
"private void 6KYP9JBG2B ( ) throws Throwable { String password ; while ( true ) { password = ""Password1234!"" ; break ; } while ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; } }",0
"private void 5D2QAX0B2G ( ) throws Throwable { String password ; while ( true ) { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; } }",0
public void ZJPJHT3 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void IZB461E ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j ++ ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 87K5JKQG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; for ( int j = 0 ; j < 1 ; j ++ ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void IE4HNSFB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } for ( int k = 0 ; k < 1 ; k ++ ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void 6PHCRIA ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void XMIB19R ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badPrivate = true ; badSink ( password ) ; }",1
"private void DE4YZT6Sink ( String password ) throws Throwable { if ( badPrivate ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
public void L9YTGXP ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void QQ0GBA4B2G1 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G1Private = false ; goodB2G1Sink ( password ) ; }",0
"private void E8FJC37B2G1Sink ( String password ) throws Throwable { if ( goodB2G1Private ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void YRD7HXFB2G2 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G2Private = true ; goodB2G2Sink ( password ) ; }",0
"private void DN5L17NB2G2Sink ( String password ) throws Throwable { if ( goodB2G2Private ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 9T833TBG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BPrivate = true ; goodG2BSink ( password ) ; }",0
"private void U3ICX9FG2BSink ( String password ) throws Throwable { if ( goodG2BPrivate ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"public void 1JZF5X6 ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_22b ( ) ) . badSink ( password ) ; }",1
public void ZZ8L44T ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void RQFPF8UB2G1 ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G1PublicStatic = false ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_22b ( ) ) . goodB2G1Sink ( password ) ; }",0
"private void S5A0HVWB2G2 ( ) throws Throwable { String password = null ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2G2PublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_22b ( ) ) . goodB2G2Sink ( password ) ; }",0
"private void 1CBCXXNG2B ( ) throws Throwable { String password = null ; password = ""Password1234!"" ; goodG2BPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_22b ( ) ) . goodG2BSink ( password ) ; }",0
"public void NL4AHN1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_22a . badPublicStatic ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",1
"public void 2ETL6ZOB2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"public void HNCSK3JB2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_22a . goodB2G2PublicStatic ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",0
"public void 2EH53I4G2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_22a . goodG2BPublicStatic ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",0
"public void DR9BXET ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
public void 0JGGTRI ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 5LNSPSCG2B ( ) throws Throwable { String passwordCopy ; { String password ; password = ""Password1234!"" ; passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void T2BI8FNB2G ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void EEXOYJXSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void G2W0H00 ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badSink ( password ) ; }",1
public void U5F5ICN ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 99Y4Z4CG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void Q0USHYNG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BSink ( password ) ; }",0
"private void R7IDDQYB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void Z3WTHQAB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } goodB2GSink ( password ) ; }",0
"private String 32A1KSFSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",1
"public void E1YOZ2S ( ) throws Throwable { String password = badSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"private String 6PR9GYBG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"private void U2N9XLDG2B ( ) throws Throwable { String password = goodG2BSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private String A0VMSTNB2GSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",0
"private void Y92EP6UB2G ( ) throws Throwable { String password = goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
public void T60LL7A ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void YDLIT8VSink ( ) throws Throwable { String password = passwordBad ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void EOIDWKM ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordBad = password ; badSink ( ) ; }",1
public void PHBVJTR ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void CWXX8OKG2BSink ( ) throws Throwable { String password = passwordGoodG2B ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void ADEF6ZCG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; passwordGoodG2B = password ; goodG2BSink ( ) ; }",0
"private void 3FH6AA3B2GSink ( ) throws Throwable { String password = passwordGoodB2G ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void 9IIENPHB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } passwordGoodB2G = password ; goodB2GSink ( ) ; }",0
"public void LTQIWOW ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_51b ( ) ) . badSink ( password ) ; }",1
public void 91516DA ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 5L35GIDG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_51b ( ) ) . goodG2BSink ( password ) ; }",0
"private void 04NOS9OB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_51b ( ) ) . goodB2GSink ( password ) ; }",0
"public void U9KLSENSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void RKLROMDG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 8C9FW8IB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void XMVXS1U ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_52b ( ) ) . badSink ( password ) ; }",1
public void DVI84EG ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 7UGIDYPG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_52b ( ) ) . goodG2BSink ( password ) ; }",0
"private void V1HIZNOB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_52b ( ) ) . goodB2GSink ( password ) ; }",0
public void 930KCEOSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_52c ( ) ) . badSink ( password ) ; },1
public void 4H7VQ7ZG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_52c ( ) ) . goodG2BSink ( password ) ; },0
public void D4FYKWZB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void 8MER8Y9Sink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void FVQTW43G2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void D8Z4WMYB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 7TFTUBA ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53b ( ) ) . badSink ( password ) ; }",1
public void 10GN7LZ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 6U7HEZ7G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53b ( ) ) . goodG2BSink ( password ) ; }",0
"private void SGQ1RHYB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53b ( ) ) . goodB2GSink ( password ) ; }",0
public void ZDUHR93Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53c ( ) ) . badSink ( password ) ; },1
public void DWAJW0PG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53c ( ) ) . goodG2BSink ( password ) ; },0
public void 2N50LK5B2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53c ( ) ) . goodB2GSink ( password ) ; },0
public void UG048HWSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53d ( ) ) . badSink ( password ) ; },1
public void FL9AC8VG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53d ( ) ) . goodG2BSink ( password ) ; },0
public void EZ5C8GVB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void 0229CMDSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void MVIJNESG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void XUAMBCVB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 37RZEBD ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54b ( ) ) . badSink ( password ) ; }",1
public void MAI87MD ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void CAZ8QJQG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54b ( ) ) . goodG2BSink ( password ) ; }",0
"private void J1TAP21B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54b ( ) ) . goodB2GSink ( password ) ; }",0
public void SQO993QSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54c ( ) ) . badSink ( password ) ; },1
public void KVBP502G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54c ( ) ) . goodG2BSink ( password ) ; },0
public void D5BQ67AB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54c ( ) ) . goodB2GSink ( password ) ; },0
public void LHDGTZKSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54d ( ) ) . badSink ( password ) ; },1
public void V700RI0G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54d ( ) ) . goodG2BSink ( password ) ; },0
public void HCXCDSJB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54d ( ) ) . goodB2GSink ( password ) ; },0
public void Z2CA2HSSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54e ( ) ) . badSink ( password ) ; },1
public void 8KBK0UZG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54e ( ) ) . goodG2BSink ( password ) ; },0
public void AD5LHG6B2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void OQ5GQTOSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void 2H6UAUXG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 7PDI8JOB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 0IG1FP0 ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_61b ( ) ) . badSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
public void H7AVB7N ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void Y2AEEMNG2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_61b ( ) ) . goodG2BSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void 676K850B2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public String CTYHJUMSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",1
"public String 1PTLJO2G2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"public String XC92RUUB2GSource ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return password ; }",0
"public void QX8AP5M ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_66b ( ) ) . badSink ( passwordArray ) ; }",1
public void 2E1FRZJ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 0YSQ7JQG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_66b ( ) ) . goodG2BSink ( passwordArray ) ; }",0
"private void TGTTRBIB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_66b ( ) ) . goodB2GSink ( passwordArray ) ; }",0
"public void QJDL1W6Sink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void AVHDFFZG2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void AY289X4B2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 7EJ7KII ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_67b ( ) ) . badSink ( passwordContainer ) ; }",1
public void YXXYDOU ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void J2PXIOEG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_67b ( ) ) . goodG2BSink ( passwordContainer ) ; }",0
"private void 25U3CMEB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_67b ( ) ) . goodB2GSink ( passwordContainer ) ; }",0
"public void TS3G79USink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void AHYPBSRG2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 84NO20CB2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void LNZ0OJI ( ) throws Throwable { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_68b ( ) ) . badSink ( ) ; }",1
public void FKIKAU0 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 6FZXRGEG2B ( ) throws Throwable { password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_68b ( ) ) . goodG2BSink ( ) ; }",0
"private void 3N8HUYGB2G ( ) throws Throwable { password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_68b ( ) ) . goodB2GSink ( ) ; }",0
"public void 1J1Z11WSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_68a . password ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void XEFP7BBG2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_68a . password ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void C787XS6B2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_68a . password ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void UQSNJLU ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_71b ( ) ) . badSink ( ( Object ) password ) ; }",1
public void QKJ6XRB ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void QXRLDYPG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_71b ( ) ) . goodG2BSink ( ( Object ) password ) ; }",0
"private void EXFUKY9B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_71b ( ) ) . goodB2GSink ( ( Object ) password ) ; }",0
"public void V2U50Q5Sink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void J398F50G2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 4BVMF9IB2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 6MKQCLR ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_72b ( ) ) . badSink ( passwordVector ) ; }",1
public void BHTGV2L ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void IN1E4SMG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_72b ( ) ) . goodG2BSink ( passwordVector ) ; }",0
"private void 32DEPZFB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_72b ( ) ) . goodB2GSink ( passwordVector ) ; }",0
"public void W3TXI5GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void MPS059XG2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void YIV0FB9B2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 9VVPURD ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_73b ( ) ) . badSink ( passwordLinkedList ) ; }",1
public void M0NBXRG ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void NY0GUVTG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_73b ( ) ) . goodG2BSink ( passwordLinkedList ) ; }",0
"private void L1G8MH4B2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_73b ( ) ) . goodB2GSink ( passwordLinkedList ) ; }",0
"public void 7FBE30MSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void NPTD1VFG2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void M2GNV09B2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void F6SL47B ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_74b ( ) ) . badSink ( passwordHashMap ) ; }",1
public void 85NHNRR ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 1QPHBAAG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_74b ( ) ) . goodG2BSink ( passwordHashMap ) ; }",0
"private void 39JS6RAB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_74b ( ) ) . goodB2GSink ( passwordHashMap ) ; }",0
"public void 8I2AGXDSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void HXZI82HG2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void F124NXNB2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void N3ZGEIO ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_75b ( ) ) . badSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void 55ZOV26 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void NHJ81N8G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_75b ( ) ) . goodG2BSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"private void WM7U0RWB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_75b ( ) ) . goodB2GSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void UQTAVPKSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void 2SQZI0IG2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void JOJR11LB2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void BP7B6TW ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_81_bad ( ) ; baseObject . action ( password ) ; }",1
public void WA6NML9 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 4ZS17ZQG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_81_goodG2B ( ) ; baseObject . action ( password ) ; }",0
"private void GB83MHUB2G ( ) throws Throwable { String password ; password = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_passwordAuth_81_goodB2G ( ) ; baseObject . action ( password ) ; }",0
"public void PQ2HHSY ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
public void UD1ANGY ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void H0VAEETG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void PSSPWQHB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void MSOSIIJ ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void BFQ5KSOG2B1 ( ) throws Throwable { String password ; if ( false ) { password = null ; } else { password = ""Password1234!"" ; } if ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void D7RUFSHG2B2 ( ) throws Throwable { String password ; if ( true ) { password = ""Password1234!"" ; } else { password = null ; } if ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 2Q5ZUPJB2G1 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( false ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void YMO294TB2G2 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 97DZBYA ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void HZ0LNFK ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void EQZNCK9G2B1 ( ) throws Throwable { String password ; if ( 5 != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( 5 == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void GI5GX8NG2B2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( 5 == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 6DFLP9XB2G1 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void GWZCH5MB2G2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 3YQXSAC ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void ZO9ZNVW ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void 9JNYYYFG2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void D7RLG0DG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void EPE4K29B2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void AZ5L7OUB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 8BZY1LV ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void FPTVP0K ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void UGZGX5HG2B1 ( ) throws Throwable { String password ; if ( privateFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 5H5ZRUMG2B2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void MTGMAH1B2G1 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void 7SRAQ7IB2G2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 44M9039 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void K8KZD7U ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void AOT3FFSG2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void C0H02GPG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void SQJIRIPB2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void O99KZJBB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 10TBFJ4 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 8DVYTEP ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void KVFRZL6G2B1 ( ) throws Throwable { String password ; if ( privateFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 6CDDNFRG2B2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void TEMB7VEB2G1 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void 6MB0ZGTB2G2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void CBLLLXW ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 4VLDK1W ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void V8SI6BTG2B1 ( ) throws Throwable { String password ; if ( privateReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void VO7AEV2G2B2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void PK06JEWB2G1 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void VWXCUN0B2G2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void ZVXYLK4 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void F8XZHKU ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void TC6YGZCG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 2CKVLCXG2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void U3A2WOGB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void QPIB17QB2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void P2TJ281 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void OVAPY6Q ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void D4S02H6G2B1 ( ) throws Throwable { String password ; if ( IO . staticFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void BIP9PLLG2B2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticTrue ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 9W6IU32B2G1 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void IO371Y7B2G2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void KBSP0Z9 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void GEP8ZG9 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void UEVRF79G2B1 ( ) throws Throwable { String password ; if ( IO . staticReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 1CSTL9KG2B2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 5W4AN9PB2G1 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void B7DX67TB2G2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void J2NOZ0V ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 4DUDDTE ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",1
"private void BUZGVQ9G2B ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = ""Password1234!"" ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 48SGQWTB2G ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void WMUQ67D ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void KCAANS7 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void MTWVVXMG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 2SY3I4IG2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void ETIB3PBB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void BAB8GY5B2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void M8A2WH4 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void QIZB6CO ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void D9K05WHG2B1 ( ) throws Throwable { String password ; if ( IO . staticFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void QCZ5L2HG2B2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticFive == 5 ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void 239NQ4MB2G1 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void 2TVRE9ZB2G2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void 041VD9O ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void J5H4QU1 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",1
"private void BHFDO1KG2B1 ( ) throws Throwable { String password ; switch ( 5 ) { case 6 : password = null ; break ; default : password = ""Password1234!"" ; break ; } switch ( 7 ) { case 7 : Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void TXRF0FWG2B2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = ""Password1234!"" ; break ; default : password = null ; break ; } switch ( 7 ) { case 7 : Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void GFD4IV4B2G1 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 8 ) { case 7 : IO . writeLine ( ""Benign, fixed string"" ) ; break ; default : if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } break ; } }",0
"private void 4SM25LEB2G2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
public void ZUE20KU ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void UF247L0 ( ) throws Throwable { String password ; while ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; } while ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; } }",1
"private void FN5UX9SG2B ( ) throws Throwable { String password ; while ( true ) { password = ""Password1234!"" ; break ; } while ( true ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } break ; } }",0
"private void FU6XXE0B2G ( ) throws Throwable { String password ; while ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } break ; } }",0
public void R3166HZ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void AXA1RS6 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j ++ ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
"private void 3V85LCBG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; for ( int j = 0 ; j < 1 ; j ++ ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void M5EGYRCB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } for ( int k = 0 ; k < 1 ; k ++ ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
public void Z5CNDTT ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void IW6LT39 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badPrivate = true ; badSink ( password ) ; }",1
"private void 90EG9C0Sink ( String password ) throws Throwable { if ( badPrivate ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
public void P5UUUCG ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void OGWN6XPB2G1 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G1Private = false ; goodB2G1Sink ( password ) ; }",0
"private void HN6TZWBB2G1Sink ( String password ) throws Throwable { if ( goodB2G1Private ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void F4M1SU6B2G2 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G2Private = true ; goodB2G2Sink ( password ) ; }",0
"private void 2JNTSGCB2G2Sink ( String password ) throws Throwable { if ( goodB2G2Private ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void W5Z8R7GG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BPrivate = true ; goodG2BSink ( password ) ; }",0
"private void 1I7KQGOG2BSink ( String password ) throws Throwable { if ( goodG2BPrivate ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void 5YF9MRS ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_22b ( ) ) . badSink ( password ) ; }",1
public void SW5CURP ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void S26BVTFB2G1 ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G1PublicStatic = false ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_22b ( ) ) . goodB2G1Sink ( password ) ; }",0
"private void Q6JWZ04B2G2 ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G2PublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_22b ( ) ) . goodB2G2Sink ( password ) ; }",0
"private void D8TDJECG2B ( ) throws Throwable { String password = null ; password = ""Password1234!"" ; goodG2BPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_22b ( ) ) . goodG2BSink ( password ) ; }",0
"public void TR2BVZ5Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_22a . badPublicStatic ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { password = null ; } }",1
"public void V1HOKX7B2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"public void 9TRXH9OB2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_22a . goodB2G2PublicStatic ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { password = null ; } }",0
"public void Y073A1VG2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_22a . goodG2BPublicStatic ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { password = null ; } }",0
"public void ZER4A2S ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",1
public void FHGUUBX ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void KJZV0C8G2B ( ) throws Throwable { String passwordCopy ; { String password ; password = ""Password1234!"" ; passwordCopy = password ; } { String password = passwordCopy ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void EYVOS66B2G ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"private void SUBW6VUSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void VBRL3CF ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badSink ( password ) ; }",1
public void 4GIMPGF ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void UXT2U2IG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void ZIF2NCGG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BSink ( password ) ; }",0
"private void 0FY9GZLB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void LTEJTZUB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2GSink ( password ) ; }",0
"private String 8QKOYSBSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",1
"public void F48ZIWM ( ) throws Throwable { String password = badSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"private String JQYVV4WG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"private void O5Z4N6MG2B ( ) throws Throwable { String password = goodG2BSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private String AGGTQL7B2GSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",0
"private void 1H0283UB2G ( ) throws Throwable { String password = goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
public void 2V6TMP0 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void VKXDXCHSink ( ) throws Throwable { String password = passwordBad ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void LYVT29H ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordBad = password ; badSink ( ) ; }",1
public void PK7ZI8W ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void E91NV6ZG2BSink ( ) throws Throwable { String password = passwordGoodG2B ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void 3EB7540G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; passwordGoodG2B = password ; goodG2BSink ( ) ; }",0
"private void EFFADRCB2GSink ( ) throws Throwable { String password = passwordGoodB2G ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"private void D6AR08PB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordGoodB2G = password ; goodB2GSink ( ) ; }",0
"public void 674KSD2 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_51b ( ) ) . badSink ( password ) ; }",1
public void A9C9KNY ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void LALCO8SG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_51b ( ) ) . goodG2BSink ( password ) ; }",0
"private void 5WNFNHEB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_51b ( ) ) . goodB2GSink ( password ) ; }",0
"public void W3MFCWQSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void C0ON9KRG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void ZVGEQMNB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void CJL320X ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_52b ( ) ) . badSink ( password ) ; }",1
public void 4K3Y0GI ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void QO4W5BVG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_52b ( ) ) . goodG2BSink ( password ) ; }",0
"private void 967RJJ9B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_52b ( ) ) . goodB2GSink ( password ) ; }",0
public void 524P05GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_52c ( ) ) . badSink ( password ) ; },1
public void SJ78TS6G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_52c ( ) ) . goodG2BSink ( password ) ; },0
public void 525SWZQB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void MP1C0Q4Sink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void FY44LMPG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void CAIDB71B2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void CK9X233 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53b ( ) ) . badSink ( password ) ; }",1
public void 6K412EC ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void A1GULP9G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53b ( ) ) . goodG2BSink ( password ) ; }",0
"private void O9HQ8ADB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53b ( ) ) . goodB2GSink ( password ) ; }",0
public void ADFWBS2Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53c ( ) ) . badSink ( password ) ; },1
public void NS7V19XG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53c ( ) ) . goodG2BSink ( password ) ; },0
public void HHPBUFBB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53c ( ) ) . goodB2GSink ( password ) ; },0
public void NJLW0U1Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53d ( ) ) . badSink ( password ) ; },1
public void WJRR0MKG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53d ( ) ) . goodG2BSink ( password ) ; },0
public void LUXQDEEB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void TYMIL8SSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void ORNVCRXG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 4ZEW3TMB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void Y9KEBHU ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54b ( ) ) . badSink ( password ) ; }",1
public void K28OFKZ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void TCX708QG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54b ( ) ) . goodG2BSink ( password ) ; }",0
"private void 42BU0K7B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54b ( ) ) . goodB2GSink ( password ) ; }",0
public void 6KZ5MTRSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54c ( ) ) . badSink ( password ) ; },1
public void O6028WGG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54c ( ) ) . goodG2BSink ( password ) ; },0
public void 9CAGMHFB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54c ( ) ) . goodB2GSink ( password ) ; },0
public void 6R5ZSMJSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54d ( ) ) . badSink ( password ) ; },1
public void 63KCH4PG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54d ( ) ) . goodG2BSink ( password ) ; },0
public void H4IHNQ1B2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54d ( ) ) . goodB2GSink ( password ) ; },0
public void QQ3AIOLSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54e ( ) ) . badSink ( password ) ; },1
public void DVOW9ZZG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54e ( ) ) . goodG2BSink ( password ) ; },0
public void 77399HEB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void HJGG0HISink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void TJMSBA6G2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void CYGQJB4B2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void 1DM7K3J ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_61b ( ) ) . badSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
public void G0OUWEJ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void T1SYXZMG2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_61b ( ) ) . goodG2BSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void SJXHS8DB2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public String G2JGTUXSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",1
"public String NKJOTSKG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"public String O1AX20UB2GSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",0
"public void ARLR0G8 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_66b ( ) ) . badSink ( passwordArray ) ; }",1
public void A2NP160 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void X5B3BKQG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_66b ( ) ) . goodG2BSink ( passwordArray ) ; }",0
"private void G1FDQE1B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_66b ( ) ) . goodB2GSink ( passwordArray ) ; }",0
"public void 2BD9FN6Sink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void MXN5OFMG2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void AUE2WW7B2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void O7XJN6G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_67b ( ) ) . badSink ( passwordContainer ) ; }",1
public void X3CER3J ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 32NCNPYG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_67b ( ) ) . goodG2BSink ( passwordContainer ) ; }",0
"private void 15O5XP1B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_67b ( ) ) . goodB2GSink ( passwordContainer ) ; }",0
"public void XHTXKZBSink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 73USVU4G2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 174JXALB2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void 3TN2R5S ( ) throws Throwable { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_68b ( ) ) . badSink ( ) ; }",1
public void FXKE6WB ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void UX09AZ5G2B ( ) throws Throwable { password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_68b ( ) ) . goodG2BSink ( ) ; }",0
"private void X805Y4UB2G ( ) throws Throwable { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_68b ( ) ) . goodB2GSink ( ) ; }",0
"public void 9CI983RSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_68a . password ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 5XJE322G2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_68a . password ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 90LFHTTB2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_68a . password ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void JIODA1Y ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_71b ( ) ) . badSink ( ( Object ) password ) ; }",1
public void OU81FRO ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void MOC5PQCG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_71b ( ) ) . goodG2BSink ( ( Object ) password ) ; }",0
"private void 3ELSKCVB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_71b ( ) ) . goodB2GSink ( ( Object ) password ) ; }",0
"public void 3U4FD8MSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void P5OCY6HG2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void TT6RW3VB2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void YUQCSIZ ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_72b ( ) ) . badSink ( passwordVector ) ; }",1
public void 2B2AGWV ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 9U8G8PVG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_72b ( ) ) . goodG2BSink ( passwordVector ) ; }",0
"private void F3X0EKKB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_72b ( ) ) . goodB2GSink ( passwordVector ) ; }",0
"public void WMJBKMYSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void WG7DWFQG2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 63FJ405B2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void DYCPWH2 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_73b ( ) ) . badSink ( passwordLinkedList ) ; }",1
public void ELL3OOU ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 1YYCR22G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_73b ( ) ) . goodG2BSink ( passwordLinkedList ) ; }",0
"private void GESXGVJB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_73b ( ) ) . goodB2GSink ( passwordLinkedList ) ; }",0
"public void 8YJ7L1HSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void XJHYIG5G2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void SID486BB2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void NRDPOFL ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_74b ( ) ) . badSink ( passwordHashMap ) ; }",1
public void WZ57GC7 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 10IT8TMG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_74b ( ) ) . goodG2BSink ( passwordHashMap ) ; }",0
"private void G6NLQ6KB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_74b ( ) ) . goodB2GSink ( passwordHashMap ) ; }",0
"public void HGF275USink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void DRVCT3TG2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void OZZ5W0UB2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void N79WL97 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_75b ( ) ) . badSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void VPZP0LN ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 3BJIPJEG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_75b ( ) ) . goodG2BSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"private void QSUH1F9B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_75b ( ) ) . goodB2GSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void UPCAQY5Sink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void NGB7LAIG2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void 9NFIT0ZB2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void F2HJ1JE ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_81_bad ( ) ; baseObject . action ( password ) ; }",1
public void C24PL12 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void EOYUA54G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_81_goodG2B ( ) ; baseObject . action ( password ) ; }",0
"private void HGE2IKUB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_81_goodB2G ( ) ; baseObject . action ( password ) ; }",0
"public void SXF2PT9 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
public void VS4QMM7 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void BSNVP3TG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void IV3RLK0B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 80AXF05 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 4R2LFMCG2B1 ( ) throws Throwable { String password ; if ( false ) { password = null ; } else { password = ""Password1234!"" ; } if ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void L32AR0RG2B2 ( ) throws Throwable { String password ; if ( true ) { password = ""Password1234!"" ; } else { password = null ; } if ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void MX0WSZCB2G1 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( false ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void BBR7G1EB2G2 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void VDGAGUZ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void DTTXD6A ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 783KWADG2B1 ( ) throws Throwable { String password ; if ( 5 != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( 5 == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void YI8XWOKG2B2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void N5M63LHB2G1 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 2H4V4JYB2G2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void W6KLNO8 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 0FAX51V ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void MW2WMBDG2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void Y6BD22XG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 2HQA5F6B2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 2JWKFMIB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void SRCQB54 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void UHUN0D6 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 7581VFKG2B1 ( ) throws Throwable { String password ; if ( privateFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void KRD7OD3G2B2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void WK58N1MB2G1 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void Y3804PHB2G2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void RC2QVTR ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 1LM3829 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void XN7XYFQG2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 8U7VQVGG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void DUXV245B2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void JVA0W4DB2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void A1IK989 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 8FPJ144 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 7FRC2JZG2B1 ( ) throws Throwable { String password ; if ( privateFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void ORWXACVG2B2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 9XP0NCIB2G1 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 6S0RFAYB2G2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void E77L0D1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void T6DXLV0 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void U5WHRP4G2B1 ( ) throws Throwable { String password ; if ( privateReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void OF1AOJ6G2B2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void JWMV9J7B2G1 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void S9WDL04B2G2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void GAFKH12 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void L32N503 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 5HAH59RG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void AT031N1G2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 0WW5ZRCB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 7WQH7S2B2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void 7C5XP8Y ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void PRMDA1A ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 9V1IGMHG2B1 ( ) throws Throwable { String password ; if ( IO . staticFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 1CJ8ZJ8G2B2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 2QMKJY1B2G1 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 9UR4S3JB2G2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void M76XZHH ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void YNH20PG ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void QHYNNYQG2B1 ( ) throws Throwable { String password ; if ( IO . staticReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 5PXDN0SG2B2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void KTGOROXB2G1 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 8C19L20B2G2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void GDXTREA ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void Q0OXJNI ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void 1HHD4FJG2B ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = ""Password1234!"" ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void SE57D3HB2G ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void D1336OL ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void ARJIJRZ ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void VOGLVBQG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 4388KD3G2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void S17IUCAB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 7KOXJLQB2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void AAO98B6 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void X67IEZ2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void G8RIJHDG2B1 ( ) throws Throwable { String password ; if ( IO . staticFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void L6ECP0DG2B2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void RHZZOQJB2G1 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void U5GI4K9B2G2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void KOY19PY ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void E161L1J ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",1
"private void ZN2S0WDG2B1 ( ) throws Throwable { String password ; switch ( 5 ) { case 6 : password = null ; break ; default : password = ""Password1234!"" ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void 2QPSKXSG2B2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = ""Password1234!"" ; break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void 48YW041B2G1 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 8 ) { case 7 : IO . writeLine ( ""Benign, fixed string"" ) ; break ; default : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; } }",0
"private void 2D5Q3D9B2G2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
public void YOP68QH ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void HNUOR3X ( ) throws Throwable { String password ; while ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; } }",1
"private void IVLUICNG2B ( ) throws Throwable { String password ; while ( true ) { password = ""Password1234!"" ; break ; } while ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; } }",0
"private void AWI3BBKB2G ( ) throws Throwable { String password ; while ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } break ; } }",0
public void Q9G4Q3X ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void JHPCTY2 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j ++ ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
"private void AHB6PNMG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; for ( int j = 0 ; j < 1 ; j ++ ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void FOPP9R3B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } for ( int k = 0 ; k < 1 ; k ++ ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
public void M2YYW7B ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void NX068MM ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badPrivate = true ; badSink ( password ) ; }",1
"private void ERNGL98Sink ( String password ) throws Throwable { if ( badPrivate ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
public void 9PIY8YJ ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void XNDSPZUB2G1 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G1Private = false ; goodB2G1Sink ( password ) ; }",0
"private void OETXTOIB2G1Sink ( String password ) throws Throwable { if ( goodB2G1Private ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void DJMQPM9B2G2 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G2Private = true ; goodB2G2Sink ( password ) ; }",0
"private void 3HVJVEOB2G2Sink ( String password ) throws Throwable { if ( goodB2G2Private ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void RX29JSFG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BPrivate = true ; goodG2BSink ( password ) ; }",0
"private void DWPD2AXG2BSink ( String password ) throws Throwable { if ( goodG2BPrivate ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"public void 5ZSWVRV ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_22b ( ) ) . badSink ( password ) ; }",1
public void 7E6BQJF ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void YHNVOIIB2G1 ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G1PublicStatic = false ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_22b ( ) ) . goodB2G1Sink ( password ) ; }",0
"private void YXEFWS4B2G2 ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G2PublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_22b ( ) ) . goodB2G2Sink ( password ) ; }",0
"private void 41XAAUPG2B ( ) throws Throwable { String password = null ; password = ""Password1234!"" ; goodG2BPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_22b ( ) ) . goodG2BSink ( password ) ; }",0
"public void RGDNXMKSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_22a . badPublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",1
"public void JYVXXUGB2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"public void OLEA86JB2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_22a . goodB2G2PublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",0
"public void 2ABV7S4G2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_22a . goodG2BPublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",0
"public void DXUB47R ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",1
public void X0K64LL ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void PRYLFWAG2B ( ) throws Throwable { String passwordCopy ; { String password ; password = ""Password1234!"" ; passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void EBHEZFFB2G ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"private void 2I3I96ESink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void H8CZSY5 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badSink ( password ) ; }",1
public void JRLOG9U ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void ASASO8LG2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void XFQTZEQG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BSink ( password ) ; }",0
"private void 9FJM5QJB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void YQV952BB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2GSink ( password ) ; }",0
"private String T8LHWY5Source ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",1
"public void K7GT81W ( ) throws Throwable { String password = badSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"private String TCVRII0G2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"private void TTLAZSJG2B ( ) throws Throwable { String password = goodG2BSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private String A6GRW4DB2GSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",0
"private void RRWGQKQB2G ( ) throws Throwable { String password = goodB2GSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
public void TODHBRN ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void KKL5HZBSink ( ) throws Throwable { String password = passwordBad ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void G1VEIQ5 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordBad = password ; badSink ( ) ; }",1
public void 32873FJ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void O7XOPLQG2BSink ( ) throws Throwable { String password = passwordGoodG2B ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void A9GDXTPG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; passwordGoodG2B = password ; goodG2BSink ( ) ; }",0
"private void AVWW02QB2GSink ( ) throws Throwable { String password = passwordGoodB2G ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void 2Y4LI46B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordGoodB2G = password ; goodB2GSink ( ) ; }",0
"public void MQH5EBK ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_51b ( ) ) . badSink ( password ) ; }",1
public void UUK6PG5 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void PVO7U6XG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_51b ( ) ) . goodG2BSink ( password ) ; }",0
"private void FPOHAQ3B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_51b ( ) ) . goodB2GSink ( password ) ; }",0
"public void B8Q7P0GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 290PHWEG2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void P2LV87UB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 73N94L7 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_52b ( ) ) . badSink ( password ) ; }",1
public void RKFJ1WB ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void BP9ZK4LG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_52b ( ) ) . goodG2BSink ( password ) ; }",0
"private void V96424QB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_52b ( ) ) . goodB2GSink ( password ) ; }",0
public void 0OU9FM3Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_52c ( ) ) . badSink ( password ) ; },1
public void SI493SOG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_52c ( ) ) . goodG2BSink ( password ) ; },0
public void IBLX22NB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void 22N9XHGSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 3NJ7QT3G2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void ZWG1UBVB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void JA281LM ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53b ( ) ) . badSink ( password ) ; }",1
public void PTRP9EK ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void I3Y6GORG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53b ( ) ) . goodG2BSink ( password ) ; }",0
"private void 3Y4FL85B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53b ( ) ) . goodB2GSink ( password ) ; }",0
public void P33RFOXSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53c ( ) ) . badSink ( password ) ; },1
public void 711D0NOG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53c ( ) ) . goodG2BSink ( password ) ; },0
public void TQHX5N6B2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53c ( ) ) . goodB2GSink ( password ) ; },0
public void TMDLFC6Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53d ( ) ) . badSink ( password ) ; },1
public void S2L35DDG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53d ( ) ) . goodG2BSink ( password ) ; },0
public void 3PUQ4O2B2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void OMYBN8ESink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void PCMEXK8G2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void F5063AZB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 9V1M171 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54b ( ) ) . badSink ( password ) ; }",1
public void M8KZUGR ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void FEXNHM8G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54b ( ) ) . goodG2BSink ( password ) ; }",0
"private void N85YGBRB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54b ( ) ) . goodB2GSink ( password ) ; }",0
public void MFFJ1P0Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54c ( ) ) . badSink ( password ) ; },1
public void LT5T07RG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54c ( ) ) . goodG2BSink ( password ) ; },0
public void YQHPNU4B2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54c ( ) ) . goodB2GSink ( password ) ; },0
public void OGY07YRSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54d ( ) ) . badSink ( password ) ; },1
public void 8J0YLSUG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54d ( ) ) . goodG2BSink ( password ) ; },0
public void BH6GGWIB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54d ( ) ) . goodB2GSink ( password ) ; },0
public void QG3IESXSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54e ( ) ) . badSink ( password ) ; },1
public void O2QSJBPG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54e ( ) ) . goodG2BSink ( password ) ; },0
public void UFCCQJHB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void EA8X4BISink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 3HQ32V8G2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void KYYEV3SB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void RVLRZHT ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_61b ( ) ) . badSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
public void 0M85M76 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void OSQ9NQQG2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_61b ( ) ) . goodG2BSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void F5TZMD7B2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public String E9IHFMUSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",1
"public String 8U7MSLJG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"public String 8LVHDDZB2GSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",0
"public void KH2RIE4 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_66b ( ) ) . badSink ( passwordArray ) ; }",1
public void 9F04G00 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void VKYT467G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_66b ( ) ) . goodG2BSink ( passwordArray ) ; }",0
"private void XCOXUGKB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_66b ( ) ) . goodB2GSink ( passwordArray ) ; }",0
"public void XH0406OSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void FLFOIKQG2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 05SMLFGB2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void X9G5NMQ ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_67b ( ) ) . badSink ( passwordContainer ) ; }",1
public void AEUF9VT ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void S02RDQJG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_67b ( ) ) . goodG2BSink ( passwordContainer ) ; }",0
"private void 0MENIC7B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_67b ( ) ) . goodB2GSink ( passwordContainer ) ; }",0
"public void G8HSUI4Sink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void TG8QNS2G2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 14YGF94B2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void FBPIH2H ( ) throws Throwable { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_68b ( ) ) . badSink ( ) ; }",1
public void ONYLMSU ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void BY1RA3BG2B ( ) throws Throwable { password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_68b ( ) ) . goodG2BSink ( ) ; }",0
"private void AL1RRLQB2G ( ) throws Throwable { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_68b ( ) ) . goodB2GSink ( ) ; }",0
"public void K6KM2H5Sink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 1PLRN49G2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void BXQUGLXB2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void NO6TJHC ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_71b ( ) ) . badSink ( ( Object ) password ) ; }",1
public void N7EBQZB ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 8ZC5NGRG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_71b ( ) ) . goodG2BSink ( ( Object ) password ) ; }",0
"private void HC8VDWSB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_71b ( ) ) . goodB2GSink ( ( Object ) password ) ; }",0
"public void QIOLG0ISink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void KIKUCX4G2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void DJFIOQYB2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 01L8PYY ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_72b ( ) ) . badSink ( passwordVector ) ; }",1
public void 5EF2TNO ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 0YW8USYG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_72b ( ) ) . goodG2BSink ( passwordVector ) ; }",0
"private void A35XDQVB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_72b ( ) ) . goodB2GSink ( passwordVector ) ; }",0
"public void 9G6ZNHKSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void ZCUTVHPG2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void RX2H2VFB2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 8FVEQ1V ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_73b ( ) ) . badSink ( passwordLinkedList ) ; }",1
public void N42BCT1 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 79ZBOEXG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_73b ( ) ) . goodG2BSink ( passwordLinkedList ) ; }",0
"private void 0E7A5EJB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_73b ( ) ) . goodB2GSink ( passwordLinkedList ) ; }",0
"public void M1Z9F2WSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 3N9W8AOG2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void O7J33K7B2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void XBNAQD2 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_74b ( ) ) . badSink ( passwordHashMap ) ; }",1
public void O6EQX0S ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void Z3TJV5HG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_74b ( ) ) . goodG2BSink ( passwordHashMap ) ; }",0
"private void A0Z6I81B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_74b ( ) ) . goodB2GSink ( passwordHashMap ) ; }",0
"public void A2BRW1RSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 08OPYY2G2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 97VVI10B2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 4CMO37G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_75b ( ) ) . badSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void 6N552F5 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void O5W049QG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_75b ( ) ) . goodG2BSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"private void 4IMYM8NB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_75b ( ) ) . goodB2GSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void 9E9GLDOSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void LEI74RNG2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void WE0X1D0B2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void 3MDW2WG ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_81_bad ( ) ; baseObject . action ( password ) ; }",1
public void TKS0JZ2 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 24CZ4A7G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_81_goodG2B ( ) ; baseObject . action ( password ) ; }",0
"private void YJ1YA4DB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_kerberosKey_81_goodB2G ( ) ; baseObject . action ( password ) ; }",0
"public void QQ8Q35A ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
public void YLNTNEB ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void ES3O6YXG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void B4WJSP6B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void BIGWLU3 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void WOGFBEAG2B1 ( ) throws Throwable { String password ; if ( false ) { password = null ; } else { password = ""Password1234!"" ; } if ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 5M6YQLCG2B2 ( ) throws Throwable { String password ; if ( true ) { password = ""Password1234!"" ; } else { password = null ; } if ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 9CA9QCDB2G1 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( false ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void C0WQHUKB2G2 ( ) throws Throwable { String password ; if ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( true ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void PYDEQAY ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void D1YC7E7 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void HALRE0EG2B1 ( ) throws Throwable { String password ; if ( 5 != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( 5 == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 9GJFK6UG2B2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void M5LCC7RB2G1 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void S9GAHHSB2G2 ( ) throws Throwable { String password ; if ( 5 == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( 5 == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void V7ACHI1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 8E6Q95B ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void CTDYEUYG2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 1FUQPRKG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void WZECGY1B2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void L7UOKM8B2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void NQ8R7DU ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void EQHUCVL ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void H508ECLG2B1 ( ) throws Throwable { String password ; if ( privateFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 9QQF2EQG2B2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void DIH8TOOB2G1 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void JZMSFNPB2G2 ( ) throws Throwable { String password ; if ( privateTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateTrue ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void GQ7UIHG ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void YDAN9A3 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void P7O2QF5G2B1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void GF2V9QZG2B2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void W2GQX1FB2G1 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 2BTRBD4B2G2 ( ) throws Throwable { String password ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void 0BW5I54 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void HQPXAXD ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void IDANKZCG2B1 ( ) throws Throwable { String password ; if ( privateFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void CZWP030G2B2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void TVEUQ73B2G1 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void THRQN1RB2G2 ( ) throws Throwable { String password ; if ( privateFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateFive == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void XZ1LM12 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void KDJ65L8 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void YMU080UG2B1 ( ) throws Throwable { String password ; if ( privateReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 41TU216G2B2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 296KNO3B2G1 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void F5YSI4FB2G2 ( ) throws Throwable { String password ; if ( privateReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( privateReturnsTrue ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void SA5J0OT ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void D1PWVU1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 3D5ZQ1ZG2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FALSE ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void RI7THZFG2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void F3JSKPSB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void QKJ32L8B2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_TRUE ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void TACW8XK ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void QPQULZS ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void IK21NI3G2B1 ( ) throws Throwable { String password ; if ( IO . staticFalse ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 7D3QLNFG2B2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 8ABAQHCB2G1 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 3MKTZFTB2G2 ( ) throws Throwable { String password ; if ( IO . staticTrue ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticTrue ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void 8NZYR15 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void KWF70LT ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 0XKAEX3G2B1 ( ) throws Throwable { String password ; if ( IO . staticReturnsFalse ( ) ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void M32BNU1G2B2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void LHWZIZ1B2G1 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 3ABZHHMB2G2 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrue ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void OJJMUQR ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 2JLS3D7 ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void 5ECO7MQG2B ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = ""Password1234!"" ; } else { password = ""Password1234!"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 939XI91B2G ( ) throws Throwable { String password ; if ( IO . staticReturnsTrueOrFalse ( ) ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } if ( IO . staticReturnsTrueOrFalse ( ) ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void Q5ZD049 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void APRGQ0O ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void LACAZR6G2B1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void ISLB7GJG2B2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void ZCRWQSMB2G1 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void Q2NX1Y9B2G2 ( ) throws Throwable { String password ; if ( IO . STATIC_FINAL_FIVE == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void 2LJRSXX ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void PWGYYTT ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void R0MD2JJG2B1 ( ) throws Throwable { String password ; if ( IO . staticFive != 5 ) { password = null ; } else { password = ""Password1234!"" ; } if ( IO . staticFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void J6MZIEDG2B2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = ""Password1234!"" ; } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 6XJHTS5B2G1 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void AQD2FT3B2G2 ( ) throws Throwable { String password ; if ( IO . staticFive == 5 ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { password = null ; } if ( IO . staticFive == 5 ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void 5UYMV1T ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 709X4Y8 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",1
"private void 3RNB76ZG2B1 ( ) throws Throwable { String password ; switch ( 5 ) { case 6 : password = null ; break ; default : password = ""Password1234!"" ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void BSMV84KG2B2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = ""Password1234!"" ; break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void L47OL6XB2G1 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 8 ) { case 7 : IO . writeLine ( ""Benign, fixed string"" ) ; break ; default : if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; } }",0
"private void PKNKBM7B2G2 ( ) throws Throwable { String password ; switch ( 6 ) { case 6 : password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : password = null ; break ; } switch ( 7 ) { case 7 : if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
public void HTB98M6 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void TZOFXNJ ( ) throws Throwable { String password ; while ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; } }",1
"private void JYG0S9RG2B ( ) throws Throwable { String password ; while ( true ) { password = ""Password1234!"" ; break ; } while ( true ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; } }",0
"private void BH0DH9MB2G ( ) throws Throwable { String password ; while ( true ) { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; } while ( true ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } break ; } }",0
public void C5ARCVO ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void G15BZ1N ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j ++ ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
"private void FABH3W8G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; for ( int j = 0 ; j < 1 ; j ++ ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 5KZG3ARB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } for ( int k = 0 ; k < 1 ; k ++ ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
public void 4MM7FQG ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void K1NA1MG ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badPrivate = true ; badSink ( password ) ; }",1
"private void V5SHHS9Sink ( String password ) throws Throwable { if ( badPrivate ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
public void GMV5TWF ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void M6RDGM5B2G1 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G1Private = false ; goodB2G1Sink ( password ) ; }",0
"private void PFMJDYNB2G1Sink ( String password ) throws Throwable { if ( goodB2G1Private ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void LGY9RU2B2G2 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G2Private = true ; goodB2G2Sink ( password ) ; }",0
"private void 9C0KJ1IB2G2Sink ( String password ) throws Throwable { if ( goodB2G2Private ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 5D2SZJ4G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BPrivate = true ; goodG2BSink ( password ) ; }",0
"private void IIGUDO0G2BSink ( String password ) throws Throwable { if ( goodG2BPrivate ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"public void 1OSRN91 ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_22b ( ) ) . badSink ( password ) ; }",1
public void 7ZY61NM ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void P6TJWJAB2G1 ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G1PublicStatic = false ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_22b ( ) ) . goodB2G1Sink ( password ) ; }",0
"private void P66SYOFB2G2 ( ) throws Throwable { String password = null ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2G2PublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_22b ( ) ) . goodB2G2Sink ( password ) ; }",0
"private void YLV48BLG2B ( ) throws Throwable { String password = null ; password = ""Password1234!"" ; goodG2BPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_22b ( ) ) . goodG2BSink ( password ) ; }",0
"public void WRK4Q2PSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_22a . badPublicStatic ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",1
"public void O8HJPODB2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"public void IU79AD4B2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_22a . goodB2G2PublicStatic ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",0
"public void 53HRLF3G2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_22a . goodG2BPublicStatic ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",0
"public void 0DS114S ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",1
public void 3MKLHJ5 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void XUV5OWZG2B ( ) throws Throwable { String passwordCopy ; { String password ; password = ""Password1234!"" ; passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void VMSESTJB2G ( ) throws Throwable { String passwordCopy ; { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordCopy = password ; } { String password = passwordCopy ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"private void 533MOHNSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void 9OVQYTO ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badSink ( password ) ; }",1
public void 143HTDL ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void GDIVV9MG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void BBPYEQWG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; goodG2BSink ( password ) ; }",0
"private void LAEDBZ0B2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void PR453PYB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } goodB2GSink ( password ) ; }",0
"private String GW22MQASource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",1
"public void EOONB0O ( ) throws Throwable { String password = badSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"private String BSPXEFJG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"private void 5DDOND5G2B ( ) throws Throwable { String password = goodG2BSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private String J91KDT5B2GSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",0
"private void KDIH0TGB2G ( ) throws Throwable { String password = goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
public void 0YJVO7Y ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void ALS33YDSink ( ) throws Throwable { String password = passwordBad ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void 5Z5B4PM ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordBad = password ; badSink ( ) ; }",1
public void J6GBECO ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void PZ55IHIG2BSink ( ) throws Throwable { String password = passwordGoodG2B ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void KX32NRKG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; passwordGoodG2B = password ; goodG2BSink ( ) ; }",0
"private void 23VAD1NB2GSink ( ) throws Throwable { String password = passwordGoodB2G ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void BWC6F14B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } passwordGoodB2G = password ; goodB2GSink ( ) ; }",0
"public void XV9DGXM ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_51b ( ) ) . badSink ( password ) ; }",1
public void VDBHRVM ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void NIU8FZIG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_51b ( ) ) . goodG2BSink ( password ) ; }",0
"private void M82L45HB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_51b ( ) ) . goodB2GSink ( password ) ; }",0
"public void 5B99HRHSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void DUROVHZG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 7N91HL3B2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void ZOHI5TB ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_52b ( ) ) . badSink ( password ) ; }",1
public void 8PO6UNT ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void RE5WUOBG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_52b ( ) ) . goodG2BSink ( password ) ; }",0
"private void LYY5XOTB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_52b ( ) ) . goodB2GSink ( password ) ; }",0
public void XQR1EM2Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_52c ( ) ) . badSink ( password ) ; },1
public void BSKNV3YG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_52c ( ) ) . goodG2BSink ( password ) ; },0
public void D8MFF4LB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void IMCV9T2Sink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void YVPLGQCG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void XHQDRHPB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void I7EFJVD ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53b ( ) ) . badSink ( password ) ; }",1
public void DZJ33SU ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void II9HR32G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53b ( ) ) . goodG2BSink ( password ) ; }",0
"private void 7JKZ5V6B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53b ( ) ) . goodB2GSink ( password ) ; }",0
public void 2N9SKO5Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53c ( ) ) . badSink ( password ) ; },1
public void 5FXV3GEG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53c ( ) ) . goodG2BSink ( password ) ; },0
public void 5W11AKCB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53c ( ) ) . goodB2GSink ( password ) ; },0
public void QDDB4EESink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53d ( ) ) . badSink ( password ) ; },1
public void 7CT8HD5G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53d ( ) ) . goodG2BSink ( password ) ; },0
public void VM3Y9TSB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void J40XC87Sink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void O23DA3GG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void HH9IW8JB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void WF7CWCS ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54b ( ) ) . badSink ( password ) ; }",1
public void 2NX6FPM ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void U7IGY7OG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54b ( ) ) . goodG2BSink ( password ) ; }",0
"private void HEXP984B2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54b ( ) ) . goodB2GSink ( password ) ; }",0
public void 5XW7C5HSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54c ( ) ) . badSink ( password ) ; },1
public void 83HFKH9G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54c ( ) ) . goodG2BSink ( password ) ; },0
public void 7KNN7MHB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54c ( ) ) . goodB2GSink ( password ) ; },0
public void ZSQUUZ1Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54d ( ) ) . badSink ( password ) ; },1
public void N9I79YVG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54d ( ) ) . goodG2BSink ( password ) ; },0
public void 7PD3DCGB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54d ( ) ) . goodB2GSink ( password ) ; },0
public void Y52GTUDSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54e ( ) ) . badSink ( password ) ; },1
public void 8TY9NFQG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54e ( ) ) . goodG2BSink ( password ) ; },0
public void LX0O230B2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void A1IQ5U2Sink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void NVD1R83G2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void OX2C9N5B2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void AM80HPQ ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_61b ( ) ) . badSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
public void 6EYI9DP ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void IYJOCDBG2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_61b ( ) ) . goodG2BSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void K5YPIX0B2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public String 8XYGP3PSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",1
"public String I2EVJUMG2BSource ( ) throws Throwable { String password ; password = ""Password1234!"" ; return password ; }",0
"public String S1AUE6SB2GSource ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return password ; }",0
"public void PA2L3PH ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_66b ( ) ) . badSink ( passwordArray ) ; }",1
public void EWGQDOB ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 6KCU1MDG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_66b ( ) ) . goodG2BSink ( passwordArray ) ; }",0
"private void 80DIX2RB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } String [ ] passwordArray = new String [ 5 ] ; passwordArray [ 2 ] = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_66b ( ) ) . goodB2GSink ( passwordArray ) ; }",0
"public void 6326TDJSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void V6PMMY9G2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void YPJ76IZB2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void UW16XSJ ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_67b ( ) ) . badSink ( passwordContainer ) ; }",1
public void A8JD6YB ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void ZBJN0F4G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_67b ( ) ) . goodG2BSink ( passwordContainer ) ; }",0
"private void HXZDIMJB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Container passwordContainer = new Container ( ) ; passwordContainer . containerOne = password ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_67b ( ) ) . goodB2GSink ( passwordContainer ) ; }",0
"public void NDIIIS1Sink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void 8Q11MIMG2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void VAJVJ4CB2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void EWLDVP9 ( ) throws Throwable { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_68b ( ) ) . badSink ( ) ; }",1
public void CGB2Y2A ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void E3HEKBDG2B ( ) throws Throwable { password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_68b ( ) ) . goodG2BSink ( ) ; }",0
"private void E2K4ES3B2G ( ) throws Throwable { password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_68b ( ) ) . goodB2GSink ( ) ; }",0
"public void L270NOQSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_68a . password ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void 2F3CHZ1G2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_68a . password ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void IE7YFY7B2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_68a . password ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void WN4W1WN ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_71b ( ) ) . badSink ( ( Object ) password ) ; }",1
public void 1R9R4VP ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void K9GCGRYG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_71b ( ) ) . goodG2BSink ( ( Object ) password ) ; }",0
"private void AVNU24VB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_71b ( ) ) . goodB2GSink ( ( Object ) password ) ; }",0
"public void 9DHVGS6Sink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void XO1HCZ5G2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void IBZF1IEB2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 2MXOY7C ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_72b ( ) ) . badSink ( passwordVector ) ; }",1
public void LNYXM9F ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 5DWVHSWG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_72b ( ) ) . goodG2BSink ( passwordVector ) ; }",0
"private void DZMP5HSB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Vector < String > passwordVector = new Vector < String > ( 5 ) ; passwordVector . add ( 0 , password ) ; passwordVector . add ( 1 , password ) ; passwordVector . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_72b ( ) ) . goodB2GSink ( passwordVector ) ; }",0
"public void 9EWTVGNSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void XQ3N2L8G2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void TU2KTWJB2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void QAERQJ1 ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_73b ( ) ) . badSink ( passwordLinkedList ) ; }",1
public void PPN1WJ3 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 09IE90VG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_73b ( ) ) . goodG2BSink ( passwordLinkedList ) ; }",0
"private void A9R9FJKB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } LinkedList < String > passwordLinkedList = new LinkedList < String > ( ) ; passwordLinkedList . add ( 0 , password ) ; passwordLinkedList . add ( 1 , password ) ; passwordLinkedList . add ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_73b ( ) ) . goodB2GSink ( passwordLinkedList ) ; }",0
"public void X0I2WCVSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void K4SB25RG2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void P1YWXCMB2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 5WFDPJX ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_74b ( ) ) . badSink ( passwordHashMap ) ; }",1
public void OV9F198 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void HQMONCNG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_74b ( ) ) . goodG2BSink ( passwordHashMap ) ; }",0
"private void 91KA5TOB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } HashMap < Integer , String > passwordHashMap = new HashMap < Integer , String > ( ) ; passwordHashMap . put ( 0 , password ) ; passwordHashMap . put ( 1 , password ) ; passwordHashMap . put ( 2 , password ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_74b ( ) ) . goodB2GSink ( passwordHashMap ) ; }",0
"public void 7SQSNAESink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void G69NFBBG2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void NZIBXR6B2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void T2O6WIB ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_75b ( ) ) . badSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void 75JLZ9R ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 8SKP6S3G2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_75b ( ) ) . goodG2BSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"private void DDWBPKDB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( password ) ; byte [ ] passwordSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_75b ( ) ) . goodB2GSink ( passwordSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void RN2XN85Sink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void 4QW3PCQG2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void 7H37UEZB2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void 2KPGN3C ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_81_bad ( ) ; baseObject . action ( password ) ; }",1
public void U5WTXBS ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void CZT4KZIG2B ( ) throws Throwable { String password ; password = ""Password1234!"" ; CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_81_goodG2B ( ) ; baseObject . action ( password ) ; }",0
"private void 8ZTMOHIB2G ( ) throws Throwable { String password ; password = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; password = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_passwordAuth_81_goodB2G ( ) ; baseObject . action ( password ) ; }",0
"public void M9NQNRI ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
public void N2682MS ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void A1ENK0QG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"private void 2EQTSJTB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void 6X3GAOU ( ) throws Throwable { String data ; if ( true ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( true ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void 82T0HB9G2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""Hello World"" ; } if ( true ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void EPROW2YG2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""Hello World"" ; } else { data = null ; } if ( true ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void KEWW8JXB2G1 ( ) throws Throwable { String data ; if ( true ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( false ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void YALE7ZYB2G2 ( ) throws Throwable { String data ; if ( true ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( true ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void TNBVJTV ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 9CUT0Y3 ( ) throws Throwable { String data ; if ( 5 == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( 5 == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void U4DYNP7G2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""Hello World"" ; } if ( 5 == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void 1SRSPFAG2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""Hello World"" ; } else { data = null ; } if ( 5 == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void 4LX4N59B2G1 ( ) throws Throwable { String data ; if ( 5 == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( 5 != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void AJHIAHVB2G2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( 5 == 5 ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void OE74FFV ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void VH6OT2M ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void N34CGY2G2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""Hello World"" ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void HA8AM21G2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""Hello World"" ; } else { data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void 3SJ4IDQB2G1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void 0GHU1Y6B2G2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void 63R7SGW ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void P78QWHD ( ) throws Throwable { String data ; if ( privateTrue ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateTrue ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void ANDPVK1G2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""Hello World"" ; } if ( privateTrue ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void XPPOHXPG2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""Hello World"" ; } else { data = null ; } if ( privateTrue ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void COQUIDYB2G1 ( ) throws Throwable { String data ; if ( privateTrue ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void SBFRUFUB2G2 ( ) throws Throwable { String data ; if ( privateTrue ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateTrue ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void YHC60GZ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void HSPM79J ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void I18U1SEG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""Hello World"" ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void F0ADEQJG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""Hello World"" ; } else { data = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void Y7D2MEWB2G1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void EORKXRQB2G2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void L0MKNSQ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void YB25T04 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateFive == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void QHELLQDG2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""Hello World"" ; } if ( privateFive == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void X39LLM3G2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""Hello World"" ; } else { data = null ; } if ( privateFive == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void XU2Q2TKB2G1 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void ZJEPGNUB2G2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateFive == 5 ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void 7PSZ6T7 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void XR6DIIP ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateReturnsTrue ( ) ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void 7CSHE4FG2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""Hello World"" ; } if ( privateReturnsTrue ( ) ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void 0TEU02UG2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""Hello World"" ; } else { data = null ; } if ( privateReturnsTrue ( ) ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void E2TZG9SB2G1 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void 4C7OKCGB2G2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( privateReturnsTrue ( ) ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void SEYAB26 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void OQFQ02X ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . STATIC_FINAL_TRUE ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void QPYAMX2G2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""Hello World"" ; } if ( IO . STATIC_FINAL_TRUE ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void 50WGL8HG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""Hello World"" ; } else { data = null ; } if ( IO . STATIC_FINAL_TRUE ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void KTAMPLMB2G1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . STATIC_FINAL_FALSE ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void TW53SIOB2G2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . STATIC_FINAL_TRUE ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void 42OSGOG ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 4IW1N7W ( ) throws Throwable { String data ; if ( IO . staticTrue ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticTrue ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void 26XW4DGG2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""Hello World"" ; } if ( IO . staticTrue ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void FMOCX7XG2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""Hello World"" ; } else { data = null ; } if ( IO . staticTrue ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void SUTR35IB2G1 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticFalse ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void D4M7YSNB2G2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticTrue ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void 6ABCY9K ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void UF85N3P ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticReturnsTrue ( ) ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void ULGTRSSG2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""Hello World"" ; } if ( IO . staticReturnsTrue ( ) ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void 7IM3C76G2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""Hello World"" ; } else { data = null ; } if ( IO . staticReturnsTrue ( ) ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void FMP1SRIB2G1 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticReturnsFalse ( ) ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void I1IF8HEB2G2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticReturnsTrue ( ) ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void 2BO3V94 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 8KTMTMM ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = ""Hello World"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",1
"private void 0TI6XMLG2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""Hello World"" ; } else { data = ""Hello World"" ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } else { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void Y6CBHYGB2G ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void 0X4HMYP ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void 372AIKW ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void 2Q1FCG3G2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""Hello World"" ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void GVU8G0GG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""Hello World"" ; } else { data = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void RWCHU3SB2G1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . STATIC_FINAL_FIVE != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void JPJVUA1B2G2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . STATIC_FINAL_FIVE == 5 ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void 8ORYA50 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void AF56MOR ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticFive == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void WVLFL23G2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""Hello World"" ; } if ( IO . staticFive == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void 1562ZXIG2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""Hello World"" ; } else { data = null ; } if ( IO . staticFive == 5 ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void SVS1IDVB2G1 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticFive != 5 ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void V7L9ZDGB2G2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; } else { data = null ; } if ( IO . staticFive == 5 ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void IICT887 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void 0V9IFMY ( ) throws Throwable { String data ; switch ( 6 ) { case 6 : PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; break ; default : data = null ; break ; } switch ( 7 ) { case 7 : Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",1
"private void QS5XKI8G2B1 ( ) throws Throwable { String data ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""Hello World"" ; break ; } switch ( 7 ) { case 7 : Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void 1HRC29LG2B2 ( ) throws Throwable { String data ; switch ( 6 ) { case 6 : data = ""Hello World"" ; break ; default : data = null ; break ; } switch ( 7 ) { case 7 : Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
"private void OPALZNQB2G1 ( ) throws Throwable { String data ; switch ( 6 ) { case 6 : PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; break ; default : data = null ; break ; } switch ( 8 ) { case 7 : IO . writeLine ( ""Benign, fixed string"" ) ; break ; default : SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } break ; } }",0
"private void QH5YRB0B2G2 ( ) throws Throwable { String data ; switch ( 6 ) { case 6 : PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; break ; default : data = null ; break ; } switch ( 7 ) { case 7 : SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } break ; default : IO . writeLine ( ""Benign, fixed string"" ) ; break ; } }",0
public void JYHTX0O ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; goodB2G1 ( ) ; goodB2G2 ( ) ; },0
"public void W27VJS8 ( ) throws Throwable { String data ; while ( true ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; break ; } while ( true ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } break ; } }",1
"private void VWK1RKVG2B ( ) throws Throwable { String data ; while ( true ) { data = ""Hello World"" ; break ; } while ( true ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } break ; } }",0
"private void QZQDQHGB2G ( ) throws Throwable { String data ; while ( true ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; break ; } while ( true ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } break ; } }",0
public void CONBHFD ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void BI71MA2 ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; for ( int j = 0 ; j < 1 ; j ++ ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
"private void EG0NNX3G2B ( ) throws Throwable { String data ; data = ""Hello World"" ; for ( int j = 0 ; j < 1 ; j ++ ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void YBMGAW0B2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; for ( int k = 0 ; k < 1 ; k ++ ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
public void 4DIFJDB ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"public void Z5JH1TB ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; badPrivate = true ; badSink ( data ) ; }",1
"private void O13TD0USink ( String data ) throws Throwable { if ( badPrivate ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
public void X59V3N8 ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void BG7G9QQB2G1 ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; goodB2G1Private = false ; goodB2G1Sink ( data ) ; }",0
"private void 20VWNSJB2G1Sink ( String data ) throws Throwable { if ( goodB2G1Private ) { IO . writeLine ( ""Benign, fixed string"" ) ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void JLW8OLGB2G2 ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; goodB2G2Private = true ; goodB2G2Sink ( data ) ; }",0
"private void 2ZVNBRXB2G2Sink ( String data ) throws Throwable { if ( goodB2G2Private ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void U6YEW3SG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; goodG2BPrivate = true ; goodG2BSink ( data ) ; }",0
"private void 9OHZ73FG2BSink ( String data ) throws Throwable { if ( goodG2BPrivate ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"public void JQZJSQC ( ) throws Throwable { String data = null ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; badPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_22b ( ) ) . badSink ( data ) ; }",1
public void JUAUQXZ ( ) throws Throwable { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B ( ) ; },0
"private void FIGSTN2B2G1 ( ) throws Throwable { String data = null ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; goodB2G1PublicStatic = false ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_22b ( ) ) . goodB2G1Sink ( data ) ; }",0
"private void 8ZSMJVSB2G2 ( ) throws Throwable { String data = null ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; goodB2G2PublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_22b ( ) ) . goodB2G2Sink ( data ) ; }",0
"private void 78YYEX1G2B ( ) throws Throwable { String data = null ; data = ""Hello World"" ; goodG2BPublicStatic = true ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_22b ( ) ) . goodG2BSink ( data ) ; }",0
"public void 0PUX431Sink ( String data ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__send_22a . badPublicStatic ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } else { data = null ; } }",1
"public void CQKN2IHB2G1Sink ( String data ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__send_22a . goodB2G1PublicStatic ) { data = null ; } else { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"public void ZB1VME4B2G2Sink ( String data ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__send_22a . goodB2G2PublicStatic ) { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } else { data = null ; } }",0
"public void 8RQ943YG2BSink ( String data ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__send_22a . goodG2BPublicStatic ) { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } else { data = null ; } }",0
"public void 2VRZCGQ ( ) throws Throwable { String dataCopy ; { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; dataCopy = data ; } { String data = dataCopy ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",1
public void JC96XFP ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 3GCUDJFG2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""Hello World"" ; dataCopy = data ; } { String data = dataCopy ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } }",0
"private void Y01X0UXB2G ( ) throws Throwable { String dataCopy ; { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; dataCopy = data ; } { String data = dataCopy ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } }",0
"private void O5JOQ50Sink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void E4FCWWL ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; badSink ( data ) ; }",1
public void 9NUMZVF ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void WXS2RCEG2BSink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"private void FLMKKG4G2B ( ) throws Throwable { String data ; data = ""Hello World"" ; goodG2BSink ( data ) ; }",0
"private void 36NXDKFB2GSink ( String data ) throws Throwable { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"private void X084FUFB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; goodB2GSink ( data ) ; }",0
"private String MJEXA24Source ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; return data ; }",1
"public void MQTY3O8 ( ) throws Throwable { String data = badSource ( ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"private String TLM0E5EG2BSource ( ) throws Throwable { String data ; data = ""Hello World"" ; return data ; }",0
"private void R5MDBUQG2B ( ) throws Throwable { String data = goodG2BSource ( ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"private String LP8NK32B2GSource ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; return data ; }",0
"private void M6187U5B2G ( ) throws Throwable { String data = goodB2GSource ( ) ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
public void CUNLHKJ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void CVW1Z9NSink ( ) throws Throwable { String data = dataBad ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void LFHBKBP ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; dataBad = data ; badSink ( ) ; }",1
public void N6U6M20 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void HDPXXPTG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"private void UDOAMVMG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"private void 4LAFRZCB2GSink ( ) throws Throwable { String data = dataGoodB2G ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"private void HMP1HOJB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; dataGoodB2G = data ; goodB2GSink ( ) ; }",0
"public void OS0O7JV ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_51b ( ) ) . badSink ( data ) ; }",1
public void JM2A2ZZ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 7JZB1GVG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_51b ( ) ) . goodG2BSink ( data ) ; }",0
"private void ATVYU0AB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_51b ( ) ) . goodB2GSink ( data ) ; }",0
"public void 65V5SAGSink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void 82ODA11G2BSink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void EV75BV1B2GSink ( String data ) throws Throwable { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void VCOGQX7 ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_52b ( ) ) . badSink ( data ) ; }",1
public void LG8MRGI ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 09H9Y6OG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_52b ( ) ) . goodG2BSink ( data ) ; }",0
"private void MP26K68B2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_52b ( ) ) . goodB2GSink ( data ) ; }",0
public void HP0TWD7Sink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_52c ( ) ) . badSink ( data ) ; },1
public void 6FX61VTG2BSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_52c ( ) ) . goodG2BSink ( data ) ; },0
public void F8D0B9UB2GSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_52c ( ) ) . goodB2GSink ( data ) ; },0
"public void CLS0L17Sink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void OU6YTFBG2BSink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void 1RD43E9B2GSink ( String data ) throws Throwable { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void D0JW93E ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53b ( ) ) . badSink ( data ) ; }",1
public void OQ1B2DC ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void TYV3QOXG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53b ( ) ) . goodG2BSink ( data ) ; }",0
"private void 5427ANVB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53b ( ) ) . goodB2GSink ( data ) ; }",0
public void 8TLT58ISink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53c ( ) ) . badSink ( data ) ; },1
public void RIX0XIQG2BSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53c ( ) ) . goodG2BSink ( data ) ; },0
public void RFJOMV2B2GSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53c ( ) ) . goodB2GSink ( data ) ; },0
public void AY66YKLSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53d ( ) ) . badSink ( data ) ; },1
public void YK6DYQ2G2BSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53d ( ) ) . goodG2BSink ( data ) ; },0
public void 7OFUFHRB2GSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_53d ( ) ) . goodB2GSink ( data ) ; },0
"public void 9PJEGRLSink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void 684OW5MG2BSink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void CYUJC5PB2GSink ( String data ) throws Throwable { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void HUNF4QG ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54b ( ) ) . badSink ( data ) ; }",1
public void W9UYBS9 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 11G2BIOG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54b ( ) ) . goodG2BSink ( data ) ; }",0
"private void OZH8R6VB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54b ( ) ) . goodB2GSink ( data ) ; }",0
public void 19J2LADSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54c ( ) ) . badSink ( data ) ; },1
public void MBA1RJXG2BSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54c ( ) ) . goodG2BSink ( data ) ; },0
public void 17P2WCVB2GSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54c ( ) ) . goodB2GSink ( data ) ; },0
public void USQWKCXSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54d ( ) ) . badSink ( data ) ; },1
public void 916J01BG2BSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54d ( ) ) . goodG2BSink ( data ) ; },0
public void LDBJ2JVB2GSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54d ( ) ) . goodB2GSink ( data ) ; },0
public void M33OMX7Sink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54e ( ) ) . badSink ( data ) ; },1
public void V7U62RTG2BSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54e ( ) ) . goodG2BSink ( data ) ; },0
public void VWZJY17B2GSink ( String data ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__send_54e ( ) ) . goodB2GSink ( data ) ; },0
"public void N8ZPT9GSink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void EGGHWDNG2BSink ( String data ) throws Throwable { Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void RZAS0ESB2GSink ( String data ) throws Throwable { SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void SOQZUZB ( ) throws Throwable { String data = ( new CWE319_Cleartext_Tx_Sensitive_Info__send_61b ( ) ) . badSource ( ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
public void 9OU1244 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void DFXYR3UG2B ( ) throws Throwable { String data = ( new CWE319_Cleartext_Tx_Sensitive_Info__send_61b ( ) ) . goodG2BSource ( ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"private void PQPBPZDB2G ( ) throws Throwable { String data = ( new CWE319_Cleartext_Tx_Sensitive_Info__send_61b ( ) ) . goodB2GSource ( ) ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public String NVK9FORSource ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; return data ; }",1
"public String BSUTF7ZG2BSource ( ) throws Throwable { String data ; data = ""Hello World"" ; return data ; }",0
"public String R3RJCT2B2GSource ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; return data ; }",0
"public void IN3V1DL ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_66b ( ) ) . badSink ( dataArray ) ; }",1
public void C6P0XSF ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void O762BGFG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"private void W8LI0B5B2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_66b ( ) ) . goodB2GSink ( dataArray ) ; }",0
"public void CV3I5PZSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void 6DKJOSAG2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void X48RTDLB2GSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void ACW9KWL ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void 5EFFGD4 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void B5VDWPEG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"private void K8TGTVRB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_67b ( ) ) . goodB2GSink ( dataContainer ) ; }",0
"public void L9EGRNNSink ( CWE319_Cleartext_Tx_Sensitive_Info__send_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void 3MN3KCNG2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__send_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void 0XWBMOFB2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__send_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void UF9PJAX ( ) throws Throwable { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_68b ( ) ) . badSink ( ) ; }",1
public void ZO2XY8O ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 3E7NIIEG2B ( ) throws Throwable { data = ""Hello World"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_68b ( ) ) . goodG2BSink ( ) ; }",0
"private void I3LWGYWB2G ( ) throws Throwable { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_68b ( ) ) . goodB2GSink ( ) ; }",0
"public void KR9HNZ7Sink ( ) throws Throwable { String data = CWE319_Cleartext_Tx_Sensitive_Info__send_68a . data ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void S6UKWYNG2BSink ( ) throws Throwable { String data = CWE319_Cleartext_Tx_Sensitive_Info__send_68a . data ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void I2CY1BYB2GSink ( ) throws Throwable { String data = CWE319_Cleartext_Tx_Sensitive_Info__send_68a . data ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void AFGKQCJ ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void EZLWSIS ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void MRQODBPG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"private void BDWTVQUB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_71b ( ) ) . goodB2GSink ( ( Object ) data ) ; }",0
"public void A3XDHAOSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void PJZXHYNG2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void MB8G6XQB2GSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void 1J7SI3R ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_72b ( ) ) . badSink ( dataVector ) ; }",1
public void FRN6RDP ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void DQCT0U7G2B ( ) throws Throwable { String data ; data = ""Hello World"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"private void AY6AS8FB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_72b ( ) ) . goodB2GSink ( dataVector ) ; }",0
"public void LDN8PI0Sink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void 0CY8C6YG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void V6LQDSSB2GSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void C5ZKCHB ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void 8QOD4EZ ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void Z0KJS54G2B ( ) throws Throwable { String data ; data = ""Hello World"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"private void S14ZETQB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_73b ( ) ) . goodB2GSink ( dataLinkedList ) ; }",0
"public void LL02CEASink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void 04QP42HG2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void LHV54U0B2GSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void 44WFXOA ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void FPDTL76 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void PCB9E6YG2B ( ) throws Throwable { String data ; data = ""Hello World"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"private void IP6BHOFB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_74b ( ) ) . goodB2GSink ( dataHashMap ) ; }",0
"public void IEPI7HXSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",1
"public void 677MJ6VG2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } }",0
"public void I09T1XJB2GSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } }",0
"public void M3UB7VH ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void 4BE1U8D ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 66IWZS6G2B ( ) throws Throwable { String data ; data = ""Hello World"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"private void W7NXHC9B2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE319_Cleartext_Tx_Sensitive_Info__send_75b ( ) ) . goodB2GSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void LSWUQ38Sink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void AIISPA4G2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Socket socket = null ; PrintWriter writer = null ; try { socket = new Socket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( socket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void QGYO5XYB2GSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; SSLSocketFactory sslsSocketFactory = null ; SSLSocket sslSocket = null ; PrintWriter writer = null ; try { sslsSocketFactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ; sslSocket = ( SSLSocket ) sslsSocketFactory . createSocket ( ""remote_host"" , 1337 ) ; writer = new PrintWriter ( sslSocket . getOutputStream ( ) , true ) ; writer . println ( data ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error writing to the socket"" , exceptIO ) ; } finally { if ( writer != null ) { writer . close ( ) ; } try { if ( sslSocket != null ) { sslSocket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing SSLSocket"" , exceptIO ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void IX0FP3A ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; CWE319_Cleartext_Tx_Sensitive_Info__send_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__send_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void H6OQHJV ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void 8LH9Y30G2B ( ) throws Throwable { String data ; data = ""Hello World"" ; CWE319_Cleartext_Tx_Sensitive_Info__send_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__send_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"private void WLK2WJDB2G ( ) throws Throwable { String data ; PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , ""AP@ssw0rd"" . toCharArray ( ) ) ; data = new String ( credentials . getPassword ( ) ) ; CWE319_Cleartext_Tx_Sensitive_Info__send_81_base baseObject = new CWE319_Cleartext_Tx_Sensitive_Info__send_81_goodB2G ( ) ; baseObject . action ( data ) ; }",0
"public void RW0JJ58Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_22a . badPublicStatic ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { password = null ; } }",1
"public void 6IOSPQHB2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } }",0
"public void WQIA04IB2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_22a . goodB2G2PublicStatic ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { password = null ; } }",0
"public void 8UVMFJTG2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_22a . goodG2BPublicStatic ) { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } else { password = null ; } }",0
"private void H1H2Z2ESink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"private void 42KFCPNSink ( ) throws Throwable { String password = passwordBad ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 6OXXSIRSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 644EY6BG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 2IIRBLWB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
public void ENCNKUYSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_52c ( ) ) . badSink ( password ) ; },1
public void QYBWEAVG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_52c ( ) ) . goodG2BSink ( password ) ; },0
public void 04H3DDQB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void OXYMKD3Sink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void HA6SHWTG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void FK1KVUDB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
public void F7V8DB6Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_53c ( ) ) . badSink ( password ) ; },1
public void 8M4YDL3G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_53c ( ) ) . goodG2BSink ( password ) ; },0
public void OOIHJTKB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_53c ( ) ) . goodB2GSink ( password ) ; },0
public void 4LDUYZFSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_53d ( ) ) . badSink ( password ) ; },1
public void F0ZPGUPG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_53d ( ) ) . goodG2BSink ( password ) ; },0
public void PK59ZVPB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void BLKW8KNSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 4L6KFIVG2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void MEGZSRMB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
public void 3K5M8J3Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54c ( ) ) . badSink ( password ) ; },1
public void X7PP811G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54c ( ) ) . goodG2BSink ( password ) ; },0
public void HQJ13NJB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54c ( ) ) . goodB2GSink ( password ) ; },0
public void S22LKGRSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54d ( ) ) . badSink ( password ) ; },1
public void ENWFYUUG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54d ( ) ) . goodG2BSink ( password ) ; },0
public void ZC08S1WB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54d ( ) ) . goodB2GSink ( password ) ; },0
public void 0OLD64CSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54e ( ) ) . badSink ( password ) ; },1
public void GVSXG50G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54e ( ) ) . goodG2BSink ( password ) ; },0
public void 4ABKWIAB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void O5PY610Sink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void LAX66D1G2BSink ( String password ) throws Throwable { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void RS27L1MB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void Q2WEZX2 ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_61b ( ) ) . badSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
public void G6A696Q ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void O4D7M7HG2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_61b ( ) ) . goodG2BSource ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"private void KCFGG25B2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void GG2DRVWSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 3X0IDAHG2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void J4ZTLFXB2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void XUZRXD2Sink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void U7U0FYMG2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 4WUWSPUB2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void 4YVBCZZSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_68a . password ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void 1BNV8W6G2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_68a . password ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 4M4IUEKB2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_driverManager_68a . password ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void BWN9L3HSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void AO1HEUUG2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 04HUSJ3B2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void D76BT3TSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void O7AXMUAG2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 1P6VT3UB2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void F406EY2Sink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void Z6GUPWKG2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void YHDTXW1B2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void V9BW2ZHSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",1
"public void FA6FYNHG2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } }",0
"public void 2SV8MBLB2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } }",0
"public void ZM68QZISink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void 5X416I2G2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void Q4602JRB2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = DriverManager . getConnection ( ""data-url"" , ""root"" , password ) ; preparedStatement = connection . prepareStatement ( ""select * from test_table"" ) ; resultSet = preparedStatement . executeQuery ( ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with database connection"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void UWEQCJNSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_22a . badPublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",1
"public void 9RLIXPMB2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } }",0
"public void 57K7VC8B2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_22a . goodB2G2PublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",0
"public void 63FGMXXG2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_22a . goodG2BPublicStatic ) { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } else { password = null ; } }",0
"private void LPEI9C7Sink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"private void 5LRCL9CSink ( ) throws Throwable { String password = passwordBad ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void RITZKT3Sink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void URC8R3IG2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void I9QWXVVB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
public void I5X1UWZSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_52c ( ) ) . badSink ( password ) ; },1
public void 5THN9XFG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_52c ( ) ) . goodG2BSink ( password ) ; },0
public void GP0VC1VB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void MZ7K9I0Sink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void ITX7C29G2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void BLM7TTSB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
public void XMU6XIWSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_53c ( ) ) . badSink ( password ) ; },1
public void XF78XVUG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_53c ( ) ) . goodG2BSink ( password ) ; },0
public void 16HDL4BB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_53c ( ) ) . goodB2GSink ( password ) ; },0
public void T3YTMCSSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_53d ( ) ) . badSink ( password ) ; },1
public void 39XNWB3G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_53d ( ) ) . goodG2BSink ( password ) ; },0
public void LD1HBCEB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void XN86MOUSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 9JO1UEGG2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 7WK9Q2KB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
public void X0VGQD3Sink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54c ( ) ) . badSink ( password ) ; },1
public void CU9PHLEG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54c ( ) ) . goodG2BSink ( password ) ; },0
public void DWALNSBB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54c ( ) ) . goodB2GSink ( password ) ; },0
public void 3R3I5FXSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54d ( ) ) . badSink ( password ) ; },1
public void GSZGGSZG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54d ( ) ) . goodG2BSink ( password ) ; },0
public void DBC1OOKB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54d ( ) ) . goodB2GSink ( password ) ; },0
public void LAS3OOFSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54e ( ) ) . badSink ( password ) ; },1
public void WD968K1G2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54e ( ) ) . goodG2BSink ( password ) ; },0
public void IMTHWAYB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void ZDQZL8GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void I8M3QM4G2BSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void PI0557NB2GSink ( String password ) throws Throwable { if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 7X1IIWK ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_61b ( ) ) . badSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
public void 6QGW3Q0 ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void WE46X01G2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_61b ( ) ) . goodG2BSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"private void BSH2QKIB2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void UL0YHNTSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 6W5NKM3G2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void HJYFNAFB2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void MXNBOSDSink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void WIA7XHLG2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void PUJU22KB2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void FZABE6KSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void FSMN44KG2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 8XQMD3EB2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_kerberosKey_68a . password ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void Q2YXV60Sink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void UO4QPIHG2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void JUFQMIGB2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 2L9IIKNSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void PYA8LGJG2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 355ZVSDB2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void B24DP8DSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 5GBINHUG2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void 7A77C6QB2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void PQXHQNESink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",1
"public void 8S049QSG2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void RMUHPUIB2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } }",0
"public void C5ZBXNNSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void Q6EIOTHG2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void M6ZZGYGB2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { KerberosPrincipal principal = new KerberosPrincipal ( ""test"" ) ; { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } KerberosKey key = new KerberosKey ( principal , password . toCharArray ( ) , null ) ; IO . writeLine ( key . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void EEL5ISLSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_22a . badPublicStatic ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",1
"public void 73DY0DAB2G1Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_22a . goodB2G1PublicStatic ) { password = null ; } else { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } }",0
"public void 8LQSC1SB2G2Sink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_22a . goodB2G2PublicStatic ) { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",0
"public void D2NYEPIG2BSink ( String password ) throws Throwable { if ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_22a . goodG2BPublicStatic ) { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } else { password = null ; } }",0
"private void L1DE3UKSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"private void 739APEJSink ( ) throws Throwable { String password = passwordBad ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void U89DPY7Sink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void ENEBUN5G2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void XK1CQB7B2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
public void BG72WKXSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_52c ( ) ) . badSink ( password ) ; },1
public void 20BYZKDG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_52c ( ) ) . goodG2BSink ( password ) ; },0
public void LE4QC3IB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_52c ( ) ) . goodB2GSink ( password ) ; },0
"public void B9D0B7ESink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void Z392P8YG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void Z8PMEBWB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
public void W8SKGYQSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_53c ( ) ) . badSink ( password ) ; },1
public void JJFPBMRG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_53c ( ) ) . goodG2BSink ( password ) ; },0
public void UK2CB7SB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_53c ( ) ) . goodB2GSink ( password ) ; },0
public void LGNA0EZSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_53d ( ) ) . badSink ( password ) ; },1
public void 8OGBJJKG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_53d ( ) ) . goodG2BSink ( password ) ; },0
public void 5FG8I3DB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_53d ( ) ) . goodB2GSink ( password ) ; },0
"public void VE88WNXSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void RT4O6EXG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 5IJG4SKB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
public void P7L0Z4PSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54c ( ) ) . badSink ( password ) ; },1
public void FBVTI8EG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54c ( ) ) . goodG2BSink ( password ) ; },0
public void 3JIRCJMB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54c ( ) ) . goodB2GSink ( password ) ; },0
public void SUDAL6YSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54d ( ) ) . badSink ( password ) ; },1
public void HZ5B3DRG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54d ( ) ) . goodG2BSink ( password ) ; },0
public void IZNEF3MB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54d ( ) ) . goodB2GSink ( password ) ; },0
public void Z6UV4EJSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54e ( ) ) . badSink ( password ) ; },1
public void 2FYCDLHG2BSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54e ( ) ) . goodG2BSink ( password ) ; },0
public void 1GL4GREB2GSink ( String password ) throws Throwable { ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_54e ( ) ) . goodB2GSink ( password ) ; },0
"public void ZJKQRG1Sink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void 6Q88B1MG2BSink ( String password ) throws Throwable { if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void PHOL39HB2GSink ( String password ) throws Throwable { if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void KEYT5WB ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_61b ( ) ) . badSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
public void LAL5N4W ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; },0
"private void O0WXAK0G2B ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_61b ( ) ) . goodG2BSource ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"private void CU6H02JB2G ( ) throws Throwable { String password = ( new CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_61b ( ) ) . goodB2GSource ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void UC89V0LSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void 9Y5ZXWKG2BSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void EP0ZO5NB2GSink ( String passwordArray [ ] ) throws Throwable { String password = passwordArray [ 2 ] ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void YURZ40DSink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void 9UL6U9FG2BSink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 815YZG4B2GSink ( CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_67a . Container passwordContainer ) throws Throwable { String password = passwordContainer . containerOne ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 5W6FVG8Sink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_68a . password ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void ABVBLSWG2BSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_68a . password ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void O9KUNKWB2GSink ( ) throws Throwable { String password = CWE319_Cleartext_Tx_Sensitive_Info__URLConnection_passwordAuth_68a . password ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 0PQWHKTSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void CZ4MSXGG2BSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void PZHLY9SB2GSink ( Object passwordObject ) throws Throwable { String password = ( String ) passwordObject ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void H1MPQ09Sink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void GAU0O0NG2BSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void QBCQUKNB2GSink ( Vector < String > passwordVector ) throws Throwable { String password = passwordVector . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void EF2LDDHSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void H94Q09KG2BSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void J7NJ23ZB2GSink ( LinkedList < String > passwordLinkedList ) throws Throwable { String password = passwordLinkedList . remove ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void G9ZZ3QLSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",1
"public void TV6RATLG2BSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 6D1RPMOB2GSink ( HashMap < Integer , String > passwordHashMap ) throws Throwable { String password = passwordHashMap . get ( 2 ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } }",0
"public void 6V2VRUQSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void FTDQDO7G2BSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void F1PVDQJB2GSink ( byte [ ] passwordSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( passwordSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String password = ( String ) streamObjectInput . readObject ( ) ; if ( password != null ) { { Cipher aesCipher = Cipher . getInstance ( ""AES"" ) ; SecretKeySpec secretKeySpec = new SecretKeySpec ( ""ABCDEFGHABCDEFGH"" . getBytes ( ""UTF-8"" ) , ""AES"" ) ; aesCipher . init ( Cipher . DECRYPT_MODE , secretKeySpec ) ; password = new String ( aesCipher . doFinal ( password . getBytes ( ""UTF-8"" ) ) , ""UTF-8"" ) ; } PasswordAuthentication credentials = new PasswordAuthentication ( ""user"" , password . toCharArray ( ) ) ; IO . writeLine ( credentials . toString ( ) ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
