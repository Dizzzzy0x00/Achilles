input,label
"public void B5FVGOC ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 55IDVFT ( ) throws Throwable { goodG2B ( ) ; },0
"private void UXNJ10AG2B ( ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 8T50E9F ( ) throws Throwable { String data ; if ( true ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void KCG6QB8G2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void MOY10ELG2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 26QJ3WY ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void W5WMQA2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 3QZ9JIPG2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void EK4PHS2G2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void GUTB60W ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 9Q3SO07 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void UW4Y4V2G2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void MQL1PT3G2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 3EHVRNO ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void ZKIROQD ( ) throws Throwable { String data ; if ( privateTrue ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 1JX2D75G2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 5JRTG99G2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void L55F812 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void FI24QA7 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void ZA0TBZKG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void CAJ5UT0G2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 51OC1NR ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void B7E2P0P ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void O6L9SCWG2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void PKIA5DQG2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void DOID0RD ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void M0KBYWO ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void M7S57WCG2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 0PXXD6KG2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void A8NF3SH ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void FQVH4O2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void HD1FL8VG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void JQNDAM1G2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 2CC6L42 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void NUMFYE6 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void J2DKKIRG2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void L5HD6ZCG2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void IEWX1FL ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 8L85JCR ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 9OE3ZTRG2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void SH0OAKGG2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void B824WN2 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void SME5QZU ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void OVJTUOJG2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void AMGVNG0 ( ) throws Throwable { goodG2B ( ) ; },0
"public void 67B7OKM ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void IT8HVD6G2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void O5MFCTIG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void GAAAU4M ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void KPHLLNQ ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void SPV774VG2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void SVVA8FDG2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void ZBBAX7Y ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 6H8UJY3 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void M3E6SX9G2B1 ( ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void PH8MQI2G2B2 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void I37Q3JW ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 0G9XG3G ( ) throws Throwable { String data ; while ( true ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void MQJA51JG2B ( ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void E5DZB5C ( ) throws Throwable { goodG2B ( ) ; },0
"public void 0K7NHO4 ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void GIW6FL6G2B ( ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
public void LOJGXSF ( ) throws Throwable { goodG2B ( ) ; },0
"public void ZVK91DK ( ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String KOJ40MZ_source ( ) throws Throwable { String data ; if ( badPrivate ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
public void MPB6PSZ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void G1EZCZJG2B1 ( ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String 60OT9YAG2B1_source ( ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void T8AAJCVG2B2 ( ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String K17O94QG2B2_source ( ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void OCXVIUX ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__connect_tcp_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void UEHEDCB ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void 56BYGVLG2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__connect_tcp_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 2JRKYMQG2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__connect_tcp_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String B9FSRO7Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__connect_tcp_22a . badPublicStatic ) { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
"public String 7T296IJG2B1Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__connect_tcp_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String 1XIC5Y9G2B2Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__connect_tcp_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void J2HN82X ( ) throws Throwable { String dataCopy ; { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
public void SSKYNJV ( ) throws Throwable { goodG2B ( ) ; },0
"private void G9HKXLVG2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void 4DV7FYWSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void QJJOX4B ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } badSink ( data ) ; }",1
public void T52OE98 ( ) throws Throwable { goodG2B ( ) ; },0
"private void IBT21NSG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 19FR8KCG2B ( ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data ) ; }",0
"private String 1KCNMAASource ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return data ; }",1
"public void 5ZOV4D8 ( ) throws Throwable { String data = badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String U1LO9UTG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void E69HPB4G2B ( ) throws Throwable { String data = goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void LLX7I8I ( ) throws Throwable { goodG2B ( ) ; },0
"private void 7JK94DXSink ( ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 0FEWNDH ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } dataBad = data ; badSink ( ) ; }",1
public void 0TIVEFW ( ) throws Throwable { goodG2B ( ) ; },0
"private void 9RUG0KEG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void JMU31B6G2B ( ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"public void BIB8RBG ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__connect_tcp_51b ( ) ) . badSink ( data ) ; }",1
public void P2J7OD0 ( ) throws Throwable { goodG2B ( ) ; },0
"private void MWQWQ05G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_51b ( ) ) . goodG2BSink ( data ) ; }",0
"public void WD8R4MMSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 47GDDPNG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void Z3DWL6G ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__connect_tcp_52b ( ) ) . badSink ( data ) ; }",1
public void PED2V1F ( ) throws Throwable { goodG2B ( ) ; },0
"private void MBL3FZGG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_52b ( ) ) . goodG2BSink ( data ) ; }",0
public void 9LFP4GFSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_52c ( ) ) . badSink ( data ) ; },1
public void NJZ57CIG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void Y7SW201Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 5YM9GRHG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SENQK22 ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__connect_tcp_53b ( ) ) . badSink ( data ) ; }",1
public void YWIX6ZC ( ) throws Throwable { goodG2B ( ) ; },0
"private void Q8V14VQG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_53b ( ) ) . goodG2BSink ( data ) ; }",0
public void YM9Q9YZSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_53c ( ) ) . badSink ( data ) ; },1
public void 7YY4F7AG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_53c ( ) ) . goodG2BSink ( data ) ; },0
public void NUZKFJKSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_53d ( ) ) . badSink ( data ) ; },1
public void V1664LWG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void NOKRBWISink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void AI2SR6PG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void R8C23VF ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__connect_tcp_54b ( ) ) . badSink ( data ) ; }",1
public void WHWG930 ( ) throws Throwable { goodG2B ( ) ; },0
"private void 2CRN1SGG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_54b ( ) ) . goodG2BSink ( data ) ; }",0
public void CAVE4RFSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_54c ( ) ) . badSink ( data ) ; },1
public void FB9N5BJG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_54c ( ) ) . goodG2BSink ( data ) ; },0
public void F9LQHWQSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_54d ( ) ) . badSink ( data ) ; },1
public void AXUC2ENG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_54d ( ) ) . goodG2BSink ( data ) ; },0
public void TFZA2G2Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_54e ( ) ) . badSink ( data ) ; },1
public void AWLUX2IG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__connect_tcp_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void 6H92OEASink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 0KRVET5G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 10UPPH8 ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__connect_tcp_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void XCDW7L0 ( ) throws Throwable { goodG2B ( ) ; },0
"private void 19L1W5SG2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__connect_tcp_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String XZUDBMASource ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } return data ; }",1
"public String 8HO2BW5G2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void DZZWCTY ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_66b ( ) ) . badSink ( dataArray ) ; }",1
public void HEED2EQ ( ) throws Throwable { goodG2B ( ) ; },0
"private void 56GW5CRG2B ( ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"public void KDV74PTSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void OMCE9UQG2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 4H8JLKJ ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void HR6E8IB ( ) throws Throwable { goodG2B ( ) ; },0
"private void ANTQ5IWG2B ( ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"public void LCAVCCBSink ( CWE36_Absolute_Path_Traversal__connect_tcp_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void G5713Q4G2BSink ( CWE36_Absolute_Path_Traversal__connect_tcp_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void VZ2ADG9 ( ) throws Throwable { data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__connect_tcp_68b ( ) ) . badSink ( ) ; }",1
public void B2LT37C ( ) throws Throwable { goodG2B ( ) ; },0
"private void M1IYHV2G2B ( ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_68b ( ) ) . goodG2BSink ( ) ; }",0
"public void G8DO68MSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__connect_tcp_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 65OMYULG2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__connect_tcp_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void DHO6X1K ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__connect_tcp_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void 83LSNZJ ( ) throws Throwable { goodG2B ( ) ; },0
"private void N6AWRU9G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"public void AGXZUKPSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void DVL4VRXG2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 11AIY2J ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_72b ( ) ) . badSink ( dataVector ) ; }",1
public void VYJR9EI ( ) throws Throwable { goodG2B ( ) ; },0
"private void 39ONZJRG2B ( ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"public void KRJUNLLSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void QU54W1JG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SHPHZ1Y ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void RBFPKU6 ( ) throws Throwable { goodG2B ( ) ; },0
"private void TN144QLG2B ( ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"public void XPIECI9Sink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 0VAXDW6G2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 4ESU3B5 ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void 8A361PX ( ) throws Throwable { goodG2B ( ) ; },0
"private void 4DAU045G2B ( ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"public void IQ5H1BHSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 0NWIP4CG2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 7MO40E7 ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void KVKSMPF ( ) throws Throwable { goodG2B ( ) ; },0
"private void F8MFQCAG2B ( ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__connect_tcp_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void 77ECVBJSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void GELXZDCG2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void UV1P4KQ ( ) throws Throwable { String data ; data = """" ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { socket = new Socket ( ""host.example.org"" , 39544 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } } } CWE36_Absolute_Path_Traversal__connect_tcp_81_base baseObject = new CWE36_Absolute_Path_Traversal__connect_tcp_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void JEEI8VF ( ) throws Throwable { goodG2B ( ) ; },0
"private void GVFZR3QG2B ( ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__connect_tcp_81_base baseObject = new CWE36_Absolute_Path_Traversal__connect_tcp_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"public void VPLDOOY ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void OI0TX0T ( ) throws Throwable { goodG2B ( ) ; },0
"private void FZO5148G2B ( ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 5K7G5HH ( ) throws Throwable { String data ; if ( true ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void N6QJKQPG2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void LYOQPX5G2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void IX3PQGM ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 4T5CB8W ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 1A37HEYG2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 6XCEH1RG2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void FWH58FP ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void Q7C70Z9 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void F6R6BRRG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void ONDNCM8G2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void WADFDNM ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void Z46F1AX ( ) throws Throwable { String data ; if ( privateTrue ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void HLQBIQZG2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void XX3EJ39G2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void U65UK0P ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void OH78I4W ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 772ICHJG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void YW5R1B3G2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void OF701YS ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void J4YH0G7 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 3D6KZZNG2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void IJ0R39TG2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void WQTKHRS ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 4QJ6BEP ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void LDD1UXWG2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 3UEGAXFG2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void LV3SRSA ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void JIE0ROS ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void HRCGIW2G2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 5EKKKGRG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void QTU3MOM ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void CWV003K ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void J3QPJI1G2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void GOJKZ4PG2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void A01BHF4 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void MKL4LAM ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 1FNW2PSG2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 4QPAHX3G2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void UA4M62R ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void DA4ICQP ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void RSAFP71G2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void HTXLX99 ( ) throws Throwable { goodG2B ( ) ; },0
"public void 2SHOUNP ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void LCXPSZCG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void IKORQW8G2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void BRPGN02 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void ABMMMV8 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void TIXFXJTG2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 0LCY908G2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void QXZNQV1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 767PJBL ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void GVI3OP9G2B1 ( ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void IDEA9BOG2B2 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void OHDHE92 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void YXZ9MXH ( ) throws Throwable { String data ; while ( true ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void WT2D27QG2B ( ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 6RY4QZ7 ( ) throws Throwable { goodG2B ( ) ; },0
"public void 7LKXZ7Z ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void 0W0Y7QVG2B ( ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
public void 057YRW6 ( ) throws Throwable { goodG2B ( ) ; },0
"public void I5CGEW3 ( ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String KJRXDQI_source ( ) throws Throwable { String data ; if ( badPrivate ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
public void 20PZ6UK ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void ODUTUAEG2B1 ( ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String RVOVLD0G2B1_source ( ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void 7DB69UUG2B2 ( ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String SIRGRAIG2B2_source ( ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void R9IBCKG ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__console_readLine_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void GBB9EE1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void HRTX45GG2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__console_readLine_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 855C0RCG2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__console_readLine_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String S6MDEELSource ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__console_readLine_22a . badPublicStatic ) { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
"public String MNHZBKWG2B1Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__console_readLine_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String CV5EK87G2B2Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__console_readLine_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void G8ZRHJX ( ) throws Throwable { String dataCopy ; { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
public void Y9Y8DFZ ( ) throws Throwable { goodG2B ( ) ; },0
"private void 76WJY7WG2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void 3NKVD9USink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void YRNFKXX ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } badSink ( data ) ; }",1
public void QMXRJXH ( ) throws Throwable { goodG2B ( ) ; },0
"private void O5LM2JVG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void YXTR5KFG2B ( ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data ) ; }",0
"private String 4SX5ARFSource ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } return data ; }",1
"public void VB731QG ( ) throws Throwable { String data = badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String BFAGWFSG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void D0W4ZYFG2B ( ) throws Throwable { String data = goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void PE66UV6 ( ) throws Throwable { goodG2B ( ) ; },0
"private void 5HHT4XNSink ( ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void JXBBA6D ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } dataBad = data ; badSink ( ) ; }",1
public void 76ZL2UU ( ) throws Throwable { goodG2B ( ) ; },0
"private void VZEGJRVG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void ELBSOKOG2B ( ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"public void CTFCMYA ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__console_readLine_51b ( ) ) . badSink ( data ) ; }",1
public void 8P1BNLO ( ) throws Throwable { goodG2B ( ) ; },0
"private void SFYBR0FG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__console_readLine_51b ( ) ) . goodG2BSink ( data ) ; }",0
"public void HZMHAZDSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void H1525RFG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SOAAZLW ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__console_readLine_52b ( ) ) . badSink ( data ) ; }",1
public void ULOUZUK ( ) throws Throwable { goodG2B ( ) ; },0
"private void BX2ZAARG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__console_readLine_52b ( ) ) . goodG2BSink ( data ) ; }",0
public void O5PHUFOSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_52c ( ) ) . badSink ( data ) ; },1
public void 3M4TNWYG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void 6JBIKWZSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 9TNKS1BG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SRC8Q80 ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__console_readLine_53b ( ) ) . badSink ( data ) ; }",1
public void 8K4PAKZ ( ) throws Throwable { goodG2B ( ) ; },0
"private void K2OX6IVG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__console_readLine_53b ( ) ) . goodG2BSink ( data ) ; }",0
public void D1YBKFZSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_53c ( ) ) . badSink ( data ) ; },1
public void OYHU737G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_53c ( ) ) . goodG2BSink ( data ) ; },0
public void 0AQONKLSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_53d ( ) ) . badSink ( data ) ; },1
public void IXXR2NKG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void DUEZI8HSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 0KGS8W7G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 38V21PR ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__console_readLine_54b ( ) ) . badSink ( data ) ; }",1
public void ZJSC4LR ( ) throws Throwable { goodG2B ( ) ; },0
"private void 26MYBY5G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__console_readLine_54b ( ) ) . goodG2BSink ( data ) ; }",0
public void OHUGDQ4Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_54c ( ) ) . badSink ( data ) ; },1
public void 038LPULG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_54c ( ) ) . goodG2BSink ( data ) ; },0
public void SR3XMCDSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_54d ( ) ) . badSink ( data ) ; },1
public void EY1XJZNG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_54d ( ) ) . goodG2BSink ( data ) ; },0
public void PUEDTI5Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_54e ( ) ) . badSink ( data ) ; },1
public void H60O0IMG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__console_readLine_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void O1LJ05SSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void Y33OV08G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 2DZUA7X ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__console_readLine_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void C5PRPCV ( ) throws Throwable { goodG2B ( ) ; },0
"private void OSC36C1G2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__console_readLine_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String SUMNUHASource ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } return data ; }",1
"public String 4KDRZN6G2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void LT4FDZ6 ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__console_readLine_66b ( ) ) . badSink ( dataArray ) ; }",1
public void 2CK17YL ( ) throws Throwable { goodG2B ( ) ; },0
"private void IUAUU91G2B ( ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__console_readLine_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"public void TQYRMOXSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void G2W6HFPG2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void U7Q0CN6 ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__console_readLine_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void MXQI5GD ( ) throws Throwable { goodG2B ( ) ; },0
"private void CZMXVRCG2B ( ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__console_readLine_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"public void 71RXO71Sink ( CWE36_Absolute_Path_Traversal__console_readLine_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void X54FDALG2BSink ( CWE36_Absolute_Path_Traversal__console_readLine_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void JKUF81L ( ) throws Throwable { data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__console_readLine_68b ( ) ) . badSink ( ) ; }",1
public void U11ZBIX ( ) throws Throwable { goodG2B ( ) ; },0
"private void WV7SLHTG2B ( ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__console_readLine_68b ( ) ) . goodG2BSink ( ) ; }",0
"public void JXD9QRZSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__console_readLine_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void P15DI6LG2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__console_readLine_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 7KLZIWR ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__console_readLine_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void OG903OH ( ) throws Throwable { goodG2B ( ) ; },0
"private void K9SHXWNG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__console_readLine_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"public void G6C0BEKSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 5T5A9KPG2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 02HS6KG ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__console_readLine_72b ( ) ) . badSink ( dataVector ) ; }",1
public void BL54J0B ( ) throws Throwable { goodG2B ( ) ; },0
"private void U6DH3CUG2B ( ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__console_readLine_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"public void JM9FUZ8Sink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 0FZBC87G2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void W20DCQX ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__console_readLine_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void JBXVSE1 ( ) throws Throwable { goodG2B ( ) ; },0
"private void J89X8YQG2B ( ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__console_readLine_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"public void G8W2TFVSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void QSN93GJG2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void EAV9LCA ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__console_readLine_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void LM9XFZW ( ) throws Throwable { goodG2B ( ) ; },0
"private void WJUV5WQG2B ( ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__console_readLine_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"public void 4AZNEMISink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 50IW9C0G2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void OOI214F ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__console_readLine_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void MVLGUHJ ( ) throws Throwable { goodG2B ( ) ; },0
"private void CFVUEGWG2B ( ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__console_readLine_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void 3U3WTA2Sink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void H49L1VTG2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void TBRS23P ( ) throws Throwable { String data ; data = """" ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { readerInputStream = new InputStreamReader ( System . in , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } } } CWE36_Absolute_Path_Traversal__console_readLine_81_base baseObject = new CWE36_Absolute_Path_Traversal__console_readLine_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void FU909MW ( ) throws Throwable { goodG2B ( ) ; },0
"private void V67WJ8QG2B ( ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__console_readLine_81_base baseObject = new CWE36_Absolute_Path_Traversal__console_readLine_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"public void 7DM2DNN ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 6F482KW ( ) throws Throwable { goodG2B ( ) ; },0
"private void T6O5RMBG2B ( ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void B1RAG4X ( ) throws Throwable { String data ; if ( true ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void QOF8M3WG2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void YQ4H8CRG2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void JR1I6O2 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void J7WF750 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void J990SR2G2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 28PDQH2G2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void WTL0F6B ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 1L5HU67 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 7AQHGFYG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void IG44FLLG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void WMI5D8I ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void P10MOTO ( ) throws Throwable { String data ; if ( privateTrue ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void TDU6DMYG2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void HC9CL5UG2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void A4MJ4W5 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void QZ3PAE8 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void CN0OLFYG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void HY5S5IOG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 7WWW9D8 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void WSYXY94 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 7EJGCCWG2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void I016STOG2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 73KW5E8 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void NGKFMO1 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void XNNIN7GG2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 2K38UCGG2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void I9MDJNI ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 6U26KDP ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 0C1NZAYG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void B9OB1H6G2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void IGDH9J1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 9WSA0U3 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 9FPVOC2G2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void BG9D2H6G2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 49PQMED ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void IBC751Z ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void WY62LWIG2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void SWRJLYNG2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void NQIPE22 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void BKM8L5V ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void KYGYCEKG2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void GOK3C6E ( ) throws Throwable { goodG2B ( ) ; },0
"public void SHPPAHQ ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void HWWWT9TG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void FJ0DT4XG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void C3XNJ6E ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void SNTO69L ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void LPZ3GM1G2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void IXD5JDGG2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void T9QGQQA ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 5TQ0KPB ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void N6CDKC9G2B1 ( ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void LHUJ3OZG2B2 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void ZPR60J5 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void FHPS581 ( ) throws Throwable { String data ; while ( true ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void D9GBXXHG2B ( ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void H7VRBX2 ( ) throws Throwable { goodG2B ( ) ; },0
"public void A9P9TNV ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void OBF69ZSG2B ( ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
public void 0AKG9IZ ( ) throws Throwable { goodG2B ( ) ; },0
"public void EC2KLAO ( ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String XD792KS_source ( ) throws Throwable { String data ; if ( badPrivate ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } return data ; }",1
public void 7NH6ROF ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void H1IDJ5VG2B1 ( ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String 5URZM4UG2B1_source ( ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void OFQX7BXG2B2 ( ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String L866QGMG2B2_source ( ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void YN75LJQ ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__database_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void YBSRB15 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void VPTZIIUG2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__database_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void GRM4672G2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__database_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String LRHX8RCSource ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__database_22a . badPublicStatic ) { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } } else { data = null ; } return data ; }",1
"public String QFOK0FBG2B1Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__database_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String URO29PSG2B2Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__database_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void ORTH2FH ( ) throws Throwable { String dataCopy ; { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
public void UZEOKFO ( ) throws Throwable { goodG2B ( ) ; },0
"private void EH2UMT6G2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void X6ANI85Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 7ZR5C5C ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } badSink ( data ) ; }",1
public void LEOWRD2 ( ) throws Throwable { goodG2B ( ) ; },0
"private void MHJWTDFG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 6L1T89CG2B ( ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data ) ; }",0
"private String TJZIUT0Source ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } return data ; }",1
"public void JRQAU9X ( ) throws Throwable { String data = badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String Y564ZN6G2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void YAOXTEPG2B ( ) throws Throwable { String data = goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void GVDR8DM ( ) throws Throwable { goodG2B ( ) ; },0
"private void CHELKXISink ( ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 8XVF80X ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } dataBad = data ; badSink ( ) ; }",1
public void 2EZ9I5Y ( ) throws Throwable { goodG2B ( ) ; },0
"private void XU3YV42G2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void H2OWD1FG2B ( ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"public void TN1DRLF ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } ( new CWE36_Absolute_Path_Traversal__database_51b ( ) ) . badSink ( data ) ; }",1
public void RFSWGN7 ( ) throws Throwable { goodG2B ( ) ; },0
"private void UF2T82DG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__database_51b ( ) ) . goodG2BSink ( data ) ; }",0
"public void 2X9RUKQSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void DYLGTV5G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 1E63YDN ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } ( new CWE36_Absolute_Path_Traversal__database_52b ( ) ) . badSink ( data ) ; }",1
public void SAEPRHJ ( ) throws Throwable { goodG2B ( ) ; },0
"private void HMNXPPXG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__database_52b ( ) ) . goodG2BSink ( data ) ; }",0
public void LI7X15BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_52c ( ) ) . badSink ( data ) ; },1
public void X7QCCTCG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void FXHLGJWSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 7EYSYITG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void VQBN4QE ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } ( new CWE36_Absolute_Path_Traversal__database_53b ( ) ) . badSink ( data ) ; }",1
public void J95HBSM ( ) throws Throwable { goodG2B ( ) ; },0
"private void 4KYT93NG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__database_53b ( ) ) . goodG2BSink ( data ) ; }",0
public void 01EDZADSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_53c ( ) ) . badSink ( data ) ; },1
public void 7X5WTJZG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_53c ( ) ) . goodG2BSink ( data ) ; },0
public void MF6HV1DSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_53d ( ) ) . badSink ( data ) ; },1
public void UGKMXGIG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void XQH55Z5Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void FXXXA8RG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 507MCJN ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } ( new CWE36_Absolute_Path_Traversal__database_54b ( ) ) . badSink ( data ) ; }",1
public void 9N6UEGO ( ) throws Throwable { goodG2B ( ) ; },0
"private void PV9Q2NIG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__database_54b ( ) ) . goodG2BSink ( data ) ; }",0
public void 6Q027P6Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_54c ( ) ) . badSink ( data ) ; },1
public void ZI4NW97G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_54c ( ) ) . goodG2BSink ( data ) ; },0
public void B680QEKSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_54d ( ) ) . badSink ( data ) ; },1
public void QIAPAGFG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_54d ( ) ) . goodG2BSink ( data ) ; },0
public void NW2FB6OSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_54e ( ) ) . badSink ( data ) ; },1
public void Z9R552YG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__database_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void 0STK4BDSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 4XVHW9JG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void TVZK1Q9 ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__database_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 9LVOW0H ( ) throws Throwable { goodG2B ( ) ; },0
"private void M2LRUE4G2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__database_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String CP6683KSource ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } return data ; }",1
"public String ZCB0V8OG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void B8YHSMW ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__database_66b ( ) ) . badSink ( dataArray ) ; }",1
public void CF6PFFX ( ) throws Throwable { goodG2B ( ) ; },0
"private void UISDZKRG2B ( ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__database_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"public void L3UNQ8MSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 4Z9YTWZG2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void TSHC890 ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__database_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void ETXZTMA ( ) throws Throwable { goodG2B ( ) ; },0
"private void GT8CGUKG2B ( ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__database_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"public void P5UKZLASink ( CWE36_Absolute_Path_Traversal__database_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void WLQS305G2BSink ( CWE36_Absolute_Path_Traversal__database_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void Z6JR4S3 ( ) throws Throwable { data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } ( new CWE36_Absolute_Path_Traversal__database_68b ( ) ) . badSink ( ) ; }",1
public void EQMHSQS ( ) throws Throwable { goodG2B ( ) ; },0
"private void D3C0F6CG2B ( ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__database_68b ( ) ) . goodG2BSink ( ) ; }",0
"public void 5XZMYX8Sink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__database_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void G8SAS40G2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__database_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 3FGZ12U ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } ( new CWE36_Absolute_Path_Traversal__database_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void 4LLI4AS ( ) throws Throwable { goodG2B ( ) ; },0
"private void 9ONT8CYG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__database_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"public void AF2UYZKSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 9XXP8NXG2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SIFGXXD ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__database_72b ( ) ) . badSink ( dataVector ) ; }",1
public void GHCWUUS ( ) throws Throwable { goodG2B ( ) ; },0
"private void OHCVDNEG2B ( ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__database_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"public void 7GM1615Sink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void TQCW2LKG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 6GUAPZ4 ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__database_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void 85KMLUH ( ) throws Throwable { goodG2B ( ) ; },0
"private void Z33CGT3G2B ( ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__database_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"public void 0RALRJSSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void M5CRKJPG2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void V5UAP25 ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__database_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void U813MYE ( ) throws Throwable { goodG2B ( ) ; },0
"private void 70JRYSHG2B ( ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__database_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"public void UXB0UAXSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void XPTV4MTG2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 0LZAOW5 ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__database_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void 75E6XXV ( ) throws Throwable { goodG2B ( ) ; },0
"private void QK421FJG2B ( ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__database_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void 5W4ZOLZSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void XEYW07WG2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void FSL1MBH ( ) throws Throwable { String data ; data = """" ; { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( ""select name from users where id=0"" ) ; resultSet = preparedStatement . executeQuery ( ) ; data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error with SQL statement"" , exceptSql ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing ResultSet"" , exceptSql ) ; } try { if ( preparedStatement != null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing PreparedStatement"" , exceptSql ) ; } try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , ""Error closing Connection"" , exceptSql ) ; } } } CWE36_Absolute_Path_Traversal__database_81_base baseObject = new CWE36_Absolute_Path_Traversal__database_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void SV6HP83 ( ) throws Throwable { goodG2B ( ) ; },0
"private void 3FG18ZOG2B ( ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__database_81_base baseObject = new CWE36_Absolute_Path_Traversal__database_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"public void GS6AQ8O ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 52NB9DT ( ) throws Throwable { goodG2B ( ) ; },0
"private void PUUDEGSG2B ( ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void IK6YX4L ( ) throws Throwable { String data ; if ( true ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void YO769F6G2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 6KRHL98G2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 607P6UF ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void UNXIFR7 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void YGSZ3VFG2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void RHHKJ86G2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 4BNJRMK ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void OF8J6A9 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void SZHNA4LG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void ESSKE0QG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 0LWT41T ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void V8KUQXG ( ) throws Throwable { String data ; if ( privateTrue ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void IM94NWTG2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 0NAKKNGG2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 4UNOFLT ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void CS6G62Y ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 6DXO5BRG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void E5ZGLLGG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void M24BP3G ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void Q9CZ8F0 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void SH4B3TOG2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void PBT5LRAG2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 816F6E1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void ZGK51XL ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void ICZFXKQG2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void VM85UE2G2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void PBQUPYC ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 0PA1AJQ ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void JPG1UH3G2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void AYF2ED4G2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void O3O1LPP ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void EK39C3Q ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void O723415G2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 2MOA2OGG2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 1776ZYV ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void DSCXSA5 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 9PG8VJFG2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void G5UNMHPG2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void Q3Y2HYM ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 2MAU3F1 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = System . getenv ( ""ADD"" ) ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void TTJQI3TG2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 5R2ASI4 ( ) throws Throwable { goodG2B ( ) ; },0
"public void LM0NGSR ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void BEUFX2EG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 8S1ZR1AG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void HF4QAAV ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void S6W0DHG ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void SFVCKLHG2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void E0FILCAG2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void WINJCRH ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void USJCXOO ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = System . getenv ( ""ADD"" ) ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void IZH5U5CG2B1 ( ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void KRX1EZQG2B2 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void JGM5T4B ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void MGZUROD ( ) throws Throwable { String data ; while ( true ) { data = System . getenv ( ""ADD"" ) ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void J9VGTEVG2B ( ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void O8BK4YV ( ) throws Throwable { goodG2B ( ) ; },0
"public void DDCZ1DZ ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void R6T2U6DG2B ( ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
public void 6HLGEBZ ( ) throws Throwable { goodG2B ( ) ; },0
"public void JQNERLB ( ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String YW7WTL7_source ( ) throws Throwable { String data ; if ( badPrivate ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } return data ; }",1
public void DP7C7XG ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void GV8BAING2B1 ( ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String CXVC0HVG2B1_source ( ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void LR55MK7G2B2 ( ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String QPWHI9UG2B2_source ( ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void RML6HPZ ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__Environment_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void YNRHKUV ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void XY93BTJG2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__Environment_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void I83B3DXG2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__Environment_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 3DTQL1HSource ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__Environment_22a . badPublicStatic ) { data = System . getenv ( ""ADD"" ) ; } else { data = null ; } return data ; }",1
"public String KW1DQHYG2B1Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__Environment_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String XVXFJ8TG2B2Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__Environment_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void 7KBQ7OR ( ) throws Throwable { String dataCopy ; { String data ; data = System . getenv ( ""ADD"" ) ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
public void XS9DFCY ( ) throws Throwable { goodG2B ( ) ; },0
"private void G20LIBOG2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void 6E1DN2PSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void OOG89DE ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; badSink ( data ) ; }",1
public void 35JLYHW ( ) throws Throwable { goodG2B ( ) ; },0
"private void JBXJXTWG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 1YSGY93G2B ( ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data ) ; }",0
"private String LUQ95KESource ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; return data ; }",1
"public void ZFX6IV8 ( ) throws Throwable { String data = badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String 2ZS8OU9G2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void 74JGF2GG2B ( ) throws Throwable { String data = goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 74BNAVZ ( ) throws Throwable { goodG2B ( ) ; },0
"private void 2ZQOTQNSink ( ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void NNLSPW5 ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; dataBad = data ; badSink ( ) ; }",1
public void KMXLQUS ( ) throws Throwable { goodG2B ( ) ; },0
"private void 28NSZGRG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void JTFTNQFG2B ( ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"public void HTGBACZ ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; ( new CWE36_Absolute_Path_Traversal__Environment_51b ( ) ) . badSink ( data ) ; }",1
public void XGTPTKA ( ) throws Throwable { goodG2B ( ) ; },0
"private void 93PABT2G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Environment_51b ( ) ) . goodG2BSink ( data ) ; }",0
"public void T3OVQQYSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void YF7RA0GG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void DNOSC0E ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; ( new CWE36_Absolute_Path_Traversal__Environment_52b ( ) ) . badSink ( data ) ; }",1
public void X1TY73T ( ) throws Throwable { goodG2B ( ) ; },0
"private void BGA9F65G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Environment_52b ( ) ) . goodG2BSink ( data ) ; }",0
public void 7EUIKVPSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_52c ( ) ) . badSink ( data ) ; },1
public void 5HU03KRG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void 3ZU3HTWSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void S0ITG65G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 553Y71F ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; ( new CWE36_Absolute_Path_Traversal__Environment_53b ( ) ) . badSink ( data ) ; }",1
public void 9JNBAK3 ( ) throws Throwable { goodG2B ( ) ; },0
"private void CATD11JG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Environment_53b ( ) ) . goodG2BSink ( data ) ; }",0
public void DKO89RYSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_53c ( ) ) . badSink ( data ) ; },1
public void IOU34JBG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_53c ( ) ) . goodG2BSink ( data ) ; },0
public void RJNGZ92Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_53d ( ) ) . badSink ( data ) ; },1
public void J8S426FG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void D59IVYHSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 0GS6TOPG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void WAXWUDK ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; ( new CWE36_Absolute_Path_Traversal__Environment_54b ( ) ) . badSink ( data ) ; }",1
public void C2VLUOE ( ) throws Throwable { goodG2B ( ) ; },0
"private void RA9XWPMG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Environment_54b ( ) ) . goodG2BSink ( data ) ; }",0
public void 352LI6HSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_54c ( ) ) . badSink ( data ) ; },1
public void 8SS5XUUG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_54c ( ) ) . goodG2BSink ( data ) ; },0
public void J9MUIWVSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_54d ( ) ) . badSink ( data ) ; },1
public void EAQZX81G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_54d ( ) ) . goodG2BSink ( data ) ; },0
public void VP2JYJMSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_54e ( ) ) . badSink ( data ) ; },1
public void K748LJPG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Environment_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void RSM5TW5Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void RWXS8U3G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 4VGYT4E ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__Environment_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 7SZ0050 ( ) throws Throwable { goodG2B ( ) ; },0
"private void A0AD2OIG2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__Environment_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 8DCTALVSource ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; return data ; }",1
"public String 16X8JALG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void MW7F5QH ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__Environment_66b ( ) ) . badSink ( dataArray ) ; }",1
public void ZFZ02VY ( ) throws Throwable { goodG2B ( ) ; },0
"private void X002XBYG2B ( ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__Environment_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"public void WTEI341Sink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 5F06G73G2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void VJXNJDM ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__Environment_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void HTQGRXN ( ) throws Throwable { goodG2B ( ) ; },0
"private void 9SAP47MG2B ( ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__Environment_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"public void DVZVZA3Sink ( CWE36_Absolute_Path_Traversal__Environment_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void XVPSDSMG2BSink ( CWE36_Absolute_Path_Traversal__Environment_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void GS8BKY4 ( ) throws Throwable { data = System . getenv ( ""ADD"" ) ; ( new CWE36_Absolute_Path_Traversal__Environment_68b ( ) ) . badSink ( ) ; }",1
public void JYXH7BW ( ) throws Throwable { goodG2B ( ) ; },0
"private void VFX6298G2B ( ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Environment_68b ( ) ) . goodG2BSink ( ) ; }",0
"public void XH6GLS3Sink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__Environment_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 6AWLA7JG2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__Environment_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void ECTLR72 ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; ( new CWE36_Absolute_Path_Traversal__Environment_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void RB0ZH4K ( ) throws Throwable { goodG2B ( ) ; },0
"private void 40LIM98G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Environment_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"public void 9NVPZ28Sink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void YTKTDI3G2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void V7XQSGY ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Environment_72b ( ) ) . badSink ( dataVector ) ; }",1
public void Z4N5RSR ( ) throws Throwable { goodG2B ( ) ; },0
"private void 261FPFHG2B ( ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Environment_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"public void D3ABTBOSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void EUZNCUCG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void Y5Q45PQ ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Environment_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void 774LWED ( ) throws Throwable { goodG2B ( ) ; },0
"private void LN72RX6G2B ( ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Environment_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"public void F9JYSZCSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 7XM2ZFBG2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SIA57W0 ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Environment_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void CV0JLE9 ( ) throws Throwable { goodG2B ( ) ; },0
"private void RP98AO4G2B ( ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Environment_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"public void Q6I1BJJSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void VPS6OE2G2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void XHXFP8T ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__Environment_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void QB8CEOP ( ) throws Throwable { goodG2B ( ) ; },0
"private void S9RSTT5G2B ( ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__Environment_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void A68M5YHSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void IL3QMVHG2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void M2AXZ8Y ( ) throws Throwable { String data ; data = System . getenv ( ""ADD"" ) ; CWE36_Absolute_Path_Traversal__Environment_81_base baseObject = new CWE36_Absolute_Path_Traversal__Environment_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void PM5MKPI ( ) throws Throwable { goodG2B ( ) ; },0
"private void IW2IEZ7G2B ( ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__Environment_81_base baseObject = new CWE36_Absolute_Path_Traversal__Environment_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"public void 1LA171W ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void R3FH52H ( ) throws Throwable { goodG2B ( ) ; },0
"private void 19BHNRTG2B ( ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void E0E70XP ( ) throws Throwable { String data ; if ( true ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void RH67GSPG2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 1D6T4H8G2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void YXJUEP5 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void FRFCEG6 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 23RFH0WG2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void THASKWVG2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 91W0TIJ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void YF4PO06 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void BLKUKTJG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void VGR96URG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void GZKQYTW ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void KVWPPXU ( ) throws Throwable { String data ; if ( privateTrue ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void LIMGE8MG2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 57FSY75G2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 5WOF1FJ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 8TDKACE ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void G82C9AHG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void WQ676TGG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void EC1XT2G ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void WUIBTI7 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void XVIGOT9G2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 8D5Z1R5G2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void YIS5O4J ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void T88RLZ2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void B0OYIKWG2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void WJCS3TZG2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void NI7XSFY ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void DMWM17C ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 32YWSNRG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void B9YMTO8G2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void I3REAY1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void IEZOZJK ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 74UKHN8G2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 1XWX4KVG2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void O8H1105 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 4BSQ1YD ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 3NMIYUZG2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 33MX6IKG2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void F8MZ1K4 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 3L633YE ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 1EA8AMFG2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 6CQKPXI ( ) throws Throwable { goodG2B ( ) ; },0
"public void 3IY3SG1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void RDCN22CG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 5KYHISIG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 51USV9Q ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void U527DPS ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void V5OFV5JG2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void OQ35BKBG2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void KV7DKSS ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void XBV1C4M ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 4D4UC6WG2B1 ( ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void QAGL48BG2B2 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void HMAFYVV ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 20GHIZA ( ) throws Throwable { String data ; while ( true ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void IWGN9K1G2B ( ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void TSH7C6Z ( ) throws Throwable { goodG2B ( ) ; },0
"public void M4PAWYU ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void YMMEACFG2B ( ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
public void EPG6J44 ( ) throws Throwable { goodG2B ( ) ; },0
"public void Z3UHU1X ( ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String MIZ3Z9P_source ( ) throws Throwable { String data ; if ( badPrivate ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
public void 2RBJP70 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void SLNK99YG2B1 ( ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String RKLB3TNG2B1_source ( ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void AHQLO6XG2B2 ( ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String NXGWILAG2B2_source ( ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void XMVRS0F ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__File_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void R2WSL7Y ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void BP17P3BG2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__File_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void V0KDZ9TG2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__File_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String BZNJ0EDSource ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__File_22a . badPublicStatic ) { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
"public String FNRIE1LG2B1Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__File_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String 1DO8SU6G2B2Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__File_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void 3MRWKSA ( ) throws Throwable { String dataCopy ; { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
public void OCGXOPK ( ) throws Throwable { goodG2B ( ) ; },0
"private void 6R6123AG2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void 1205VMESink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void LDS4F0W ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } badSink ( data ) ; }",1
public void 1GBGM5Y ( ) throws Throwable { goodG2B ( ) ; },0
"private void OPWF60TG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void POEIHC7G2B ( ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data ) ; }",0
"private String 0DTF5V0Source ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } return data ; }",1
"public void JWS2L2R ( ) throws Throwable { String data = badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String EKTL8NTG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void VVGWLN7G2B ( ) throws Throwable { String data = goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void D19GAZ0 ( ) throws Throwable { goodG2B ( ) ; },0
"private void C5PV6O0Sink ( ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void K59TUTL ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } dataBad = data ; badSink ( ) ; }",1
public void 9PSYZPG ( ) throws Throwable { goodG2B ( ) ; },0
"private void PZ0WG2HG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void ATVSZ2VG2B ( ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"public void CNCAI3P ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__File_51b ( ) ) . badSink ( data ) ; }",1
public void 7AQ5VA3 ( ) throws Throwable { goodG2B ( ) ; },0
"private void 5P52SKQG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__File_51b ( ) ) . goodG2BSink ( data ) ; }",0
"public void IGHT4XISink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void OK25QKWG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 6CZJXUQ ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__File_52b ( ) ) . badSink ( data ) ; }",1
public void E9N3G3I ( ) throws Throwable { goodG2B ( ) ; },0
"private void SKLGSW2G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__File_52b ( ) ) . goodG2BSink ( data ) ; }",0
public void FR62Q10Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_52c ( ) ) . badSink ( data ) ; },1
public void IJLUNUDG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void THT9L25Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 99ISSBSG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void PH80V2C ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__File_53b ( ) ) . badSink ( data ) ; }",1
public void E3YRXDK ( ) throws Throwable { goodG2B ( ) ; },0
"private void SU07IMFG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__File_53b ( ) ) . goodG2BSink ( data ) ; }",0
public void QVBB21QSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_53c ( ) ) . badSink ( data ) ; },1
public void YABIGXEG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_53c ( ) ) . goodG2BSink ( data ) ; },0
public void 2FGJBMQSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_53d ( ) ) . badSink ( data ) ; },1
public void KXGPUC6G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void 6YDC98ZSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void KOSE8WMG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void TZMCY4R ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__File_54b ( ) ) . badSink ( data ) ; }",1
public void PXJ0N8U ( ) throws Throwable { goodG2B ( ) ; },0
"private void LCJX6H1G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__File_54b ( ) ) . goodG2BSink ( data ) ; }",0
public void 68AGYUNSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_54c ( ) ) . badSink ( data ) ; },1
public void 9ZO7SAIG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_54c ( ) ) . goodG2BSink ( data ) ; },0
public void 14ZOSIPSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_54d ( ) ) . badSink ( data ) ; },1
public void MPCMQ7RG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_54d ( ) ) . goodG2BSink ( data ) ; },0
public void 3LEOTJMSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_54e ( ) ) . badSink ( data ) ; },1
public void LLSQTJUG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__File_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void IYZ4L01Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void Q13WQGPG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 6M2KO71 ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__File_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void T1Z7SYT ( ) throws Throwable { goodG2B ( ) ; },0
"private void U2ZJVN2G2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__File_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String GMB6YPZSource ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } return data ; }",1
"public String JU2TKDDG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void 66K39KP ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__File_66b ( ) ) . badSink ( dataArray ) ; }",1
public void QZ52VFA ( ) throws Throwable { goodG2B ( ) ; },0
"private void V9X6HKPG2B ( ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__File_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"public void 4ZRRVD9Sink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 3K2A4ZPG2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void L45O83X ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__File_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void KFS8KON ( ) throws Throwable { goodG2B ( ) ; },0
"private void S04C092G2B ( ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__File_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"public void KD47T1DSink ( CWE36_Absolute_Path_Traversal__File_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 63Q59BKG2BSink ( CWE36_Absolute_Path_Traversal__File_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 6K4YP3N ( ) throws Throwable { data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__File_68b ( ) ) . badSink ( ) ; }",1
public void N5SAUVP ( ) throws Throwable { goodG2B ( ) ; },0
"private void UAEQJ6WG2B ( ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__File_68b ( ) ) . goodG2BSink ( ) ; }",0
"public void 2I4BO39Sink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__File_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void N8ZP4NSG2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__File_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void KOOZF2E ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__File_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void 6EVZFBP ( ) throws Throwable { goodG2B ( ) ; },0
"private void AQ6C30QG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__File_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"public void LJPXE67Sink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 2LO5CGIG2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void Z6X7CBH ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__File_72b ( ) ) . badSink ( dataVector ) ; }",1
public void YN41A3X ( ) throws Throwable { goodG2B ( ) ; },0
"private void COENYJSG2B ( ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__File_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"public void PIMXDAJSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 3BBLQROG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 6WCRS0B ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__File_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void M5GGB56 ( ) throws Throwable { goodG2B ( ) ; },0
"private void SGOKJY1G2B ( ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__File_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"public void H2HVS55Sink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void NKOAF25G2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void LT70YZX ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__File_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void HG0F1R2 ( ) throws Throwable { goodG2B ( ) ; },0
"private void A8W5I41G2B ( ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__File_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"public void A4WOQVMSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void IZXX39TG2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void PVNWIZF ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__File_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void 2EPW474 ( ) throws Throwable { goodG2B ( ) ; },0
"private void E4AMO73G2B ( ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__File_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void O4EDNMPSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void 7OKMU2BG2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void SIMYA8Q ( ) throws Throwable { String data ; data = """" ; { File file = new File ( ""C:\\data.txt"" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } CWE36_Absolute_Path_Traversal__File_81_base baseObject = new CWE36_Absolute_Path_Traversal__File_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void O0CVVQN ( ) throws Throwable { goodG2B ( ) ; },0
"private void 4TH2003G2B ( ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__File_81_base baseObject = new CWE36_Absolute_Path_Traversal__File_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"public void YB8LPEG ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void LRG7AUE ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void QCI8S21G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void Y88BJBC ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( true ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void M4NZK2CG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 97WUHLHG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void NZTSUBJ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void SQ54Z2U ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 == 5 ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void GSYJKPIG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void QON6FJRG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 6GETAAD ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 38ACBTS ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void CFEC6DMG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 8IA53VGG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void PXTFTU1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void KC3H1U6 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateTrue ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 12QPVKBG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 0MAA6J8G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void PA5H6LF ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void WQFDN13 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 8EPN9GVG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void PS6BJNUG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SKYS56H ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void MYOS2BQ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive == 5 ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void B8YUGM1G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void BMTT0BCG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void PZ7KJFQ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void RACOQ2Q ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 7P3X6SNG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 9CVKX0YG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void TBYWJXZ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void LC5XEUB ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 4BUMBZSG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 2B8SKRSG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void U0AZ7L2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void L3Q2TE8 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void G9ET1DQG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void JDX95OFG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void LNKVMA2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 75ROZZ7 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void VM0SWGWG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void B3SBHJJG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void NRCYPDU ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 3OXK9ZD ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void CPUQR3XG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void PF0R01K ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void ELGYI2Q ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void UND3Q3XG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void G06024EG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 4VP218J ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void BNE39OH ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void WWF8O2FG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 70QBFSIG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 5RTX9AG ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 138Q3GJ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void NKAPSBKG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 7K3AA0YG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 7ONVPLX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 7NVPRZQ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; while ( true ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void FWQZMD9G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void OUI25MJ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void F5QH5RX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void UY86C2NG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"public void NLKD03N ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void UMITOY9 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String Q2YG4QA_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( badPrivate ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } return data ; }",1
"public void LUCOD65 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"private void SRLCC5VG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String WDPSPBVG2B1_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void G7BZT3GG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String ME2Q7K1G2B2_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void 1AI8GVF ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_22b ( ) ) . badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void GXY34H3 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"private void 3ZIU6ORG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_22b ( ) ) . goodG2B1Source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void SMKHGHDG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_22b ( ) ) . goodG2B2Source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String JI5IW2QSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getCookies_Servlet_22a . badPublicStatic ) { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } } else { data = null ; } return data ; }",1
"public String H4U1Q4CG2B1Source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getCookies_Servlet_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String L481XHUG2B2Source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getCookies_Servlet_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void C2QAQ1X ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String dataCopy ; { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"public void J0K3XHP ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void FHKUGO9G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void 3D24JFQSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void SA6D6JQ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } badSink ( data , request , response ) ; }",1
"public void BG7DPOS ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void I8OEWV2G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 16DXM8CG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data , request , response ) ; }",0
"private String G5V3WPASource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } return data ; }",1
"public void RDMZ05R ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String 57STEFUG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void QDSNGN9G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = goodG2BSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 5JCYJ29 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void VI4NOJSSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void Y88U7C0 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } dataBad = data ; badSink ( request , response ) ; }",1
"public void FZETLW5 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 7Y552DLG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void U6ECZLGG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; }",0
"public void BMWG755 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_51b ( ) ) . badSink ( data , request , response ) ; }",1
"public void ED3L6OR ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void GMJ1QPNG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_51b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void GZ6EDYRSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void MF7TMO7G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void IH3OGOK ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_52b ( ) ) . badSink ( data , request , response ) ; }",1
"public void NQY7QV9 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 3DAGDCGG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_52b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 6QHA139Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_52c ( ) ) . badSink ( data , request , response ) ; }",1
"public void B7ULLTAG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_52c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void T8GUUT6Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 8AMTPP0G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void OBF8WN9 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_53b ( ) ) . badSink ( data , request , response ) ; }",1
"public void WAX39YK ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void UOK80WZG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_53b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void KO0DFHASink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_53c ( ) ) . badSink ( data , request , response ) ; }",1
"public void FRN16WJG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_53c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void V3HAVHOSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_53d ( ) ) . badSink ( data , request , response ) ; }",1
"public void AGS4PSXG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_53d ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 9UHPW4VSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 7U469I8G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 09GU94Y ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_54b ( ) ) . badSink ( data , request , response ) ; }",1
"public void L8U4LYJ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void HZTBDITG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_54b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void BVDB26TSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_54c ( ) ) . badSink ( data , request , response ) ; }",1
"public void K6XDLRQG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_54c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void SZDNOBPSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_54d ( ) ) . badSink ( data , request , response ) ; }",1
"public void KH5SOOPG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_54d ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void TSSBMOVSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_54e ( ) ) . badSink ( data , request , response ) ; }",1
"public void NK3IVHRG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_54e ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void G10PVWESink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void YRFRDZQG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 0OOAQXP ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_61b ( ) ) . badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void D5GSJEC ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void DVP7NEDG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_61b ( ) ) . goodG2BSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 2AEZR10Source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } return data ; }",1
"public String 2YWP80TG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void L7EX637 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_66b ( ) ) . badSink ( dataArray , request , response ) ; }",1
"public void 4LWZ0C6 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void EQ1C5PUG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_66b ( ) ) . goodG2BSink ( dataArray , request , response ) ; }",0
"public void 14GQECOSink ( String dataArray [ ] , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void WL3DXC3G2BSink ( String dataArray [ ] , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 4GJEGSG ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_67b ( ) ) . badSink ( dataContainer , request , response ) ; }",1
"public void 414P2QX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void CSHU2J3G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_67b ( ) ) . goodG2BSink ( dataContainer , request , response ) ; }",0
"public void D3TM7J1Sink ( CWE36_Absolute_Path_Traversal__getCookies_Servlet_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 5IGBP69G2BSink ( CWE36_Absolute_Path_Traversal__getCookies_Servlet_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void HOL7AUX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_68b ( ) ) . badSink ( request , response ) ; }",1
"public void L0CC2N9 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void S9SFXABG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_68b ( ) ) . goodG2BSink ( request , response ) ; }",0
"public void JU51VNLSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__getCookies_Servlet_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 75BFRTAG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__getCookies_Servlet_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 0FDM0AS ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_71b ( ) ) . badSink ( ( Object ) data , request , response ) ; }",1
"public void ZBO3O3W ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void W0WP797G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_71b ( ) ) . goodG2BSink ( ( Object ) data , request , response ) ; }",0
"public void YETWM66Sink ( Object dataObject , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void QG0YOLKG2BSink ( Object dataObject , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void HZ8FXS3 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_72b ( ) ) . badSink ( dataVector , request , response ) ; }",1
"public void FM7TV95 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void FIBNJX7G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_72b ( ) ) . goodG2BSink ( dataVector , request , response ) ; }",0
"public void AR8DY5QSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void EVULR4ZG2BSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void DFT7HCV ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_73b ( ) ) . badSink ( dataLinkedList , request , response ) ; }",1
"public void RKZJ35Y ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void KXEEPUUG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_73b ( ) ) . goodG2BSink ( dataLinkedList , request , response ) ; }",0
"public void U3ENE6TSink ( LinkedList < String > dataLinkedList , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void QUP4Q45G2BSink ( LinkedList < String > dataLinkedList , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void AXPD8VK ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_74b ( ) ) . badSink ( dataHashMap , request , response ) ; }",1
"public void 3ELT6I5 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void IS23DBQG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_74b ( ) ) . goodG2BSink ( dataHashMap , request , response ) ; }",0
"public void TT3DT89Sink ( HashMap < Integer , String > dataHashMap , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 9PP3JHEG2BSink ( HashMap < Integer , String > dataHashMap , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void YEYCGGR ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_75b ( ) ) . badSink ( dataSerialized , request , response ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
"public void RU2DI1V ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void MHV7N1AG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__getCookies_Servlet_75b ( ) ) . goodG2BSink ( dataSerialized , request , response ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void 4MUA994Sink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void 57MYPW0G2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void 682ADXH ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources != null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } CWE36_Absolute_Path_Traversal__getCookies_Servlet_81_base baseObject = new CWE36_Absolute_Path_Traversal__getCookies_Servlet_81_bad ( ) ; baseObject . action ( data , request , response ) ; }",1
"public void Z1XTFVQ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void J7ZWYFDG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__getCookies_Servlet_81_base baseObject = new CWE36_Absolute_Path_Traversal__getCookies_Servlet_81_goodG2B ( ) ; baseObject . action ( data , request , response ) ; }",0
"public void TAJRZEX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 2P2X7WL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void A55C28MG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void PBXY0H3 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( true ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void LQ3CV64G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 9OUS9HOG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void AJNUYLX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 31TU3O1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 == 5 ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void LKLQQ8JG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void T9YY6Z9G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void J48Q0OQ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void ATLMV9W ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 9JG8SPHG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void VYHS12KG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void KHMCB2Y ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void IRFP9UL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateTrue ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 0KM3ISDG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 7QVSEDBG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void CDM5PF3 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void VKX9CKF ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void QSM9GISG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void MA3X7BLG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 719D2WL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void Z6VPYRY ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive == 5 ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void NEYW8PIG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void T0H8XUOG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void VYIO6X3 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void VHGSXPC ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void C2WNMTTG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 7H1JE3HG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void O45PJ8Z ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 0ANUBN3 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 9NDN6C8G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void VEAGIK6G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void WJ6ZL3H ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 4389JWZ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 53PLBUAG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void LUWJVOIG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void V99C1KH ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void PWTJLC0 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void DPCIRPDG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void X8K6BBLG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SLUU0AK ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void LTO6QGC ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = request . getParameter ( ""name"" ) ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void LUWZPJUG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void QNR28G8 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void LE6ZY52 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 7J4V9QCG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void XGM2GBFG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void B9T0PCF ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 2U5VQKW ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void J7OJ92ZG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void CJ7XU5JG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 2CW4ZHQ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void VOUO5QF ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = request . getParameter ( ""name"" ) ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void PSFI53RG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 1QYGP8GG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void IX1XIGN ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void GXS4CDY ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; while ( true ) { data = request . getParameter ( ""name"" ) ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void CCT17V6G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void F0MWSL9 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void PWNE0HH ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void JIW0MMIG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"public void 7O1JHAW ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void 0OJ3Y0W ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String 6T14CQ2_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( badPrivate ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } return data ; }",1
"public void JOIP3YD ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"private void KR8TXTEG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String KMLQORYG2B1_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void 5J02QITG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String SV0KWQ0G2B2_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void PYAZEEV ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_22b ( ) ) . badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void LJ3TJF7 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"private void 2VOAJCBG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_22b ( ) ) . goodG2B1Source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void JY4A9T6G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_22b ( ) ) . goodG2B2Source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String H0CRHYYSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getParameter_Servlet_22a . badPublicStatic ) { data = request . getParameter ( ""name"" ) ; } else { data = null ; } return data ; }",1
"public String 0Z67DHEG2B1Source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getParameter_Servlet_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String 9GLTEGCG2B2Source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getParameter_Servlet_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void 0QCB7ID ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String dataCopy ; { String data ; data = request . getParameter ( ""name"" ) ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"public void G3W9WUM ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 1LCGTX4G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void 3YH4SSQSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 9PWZQ4O ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; badSink ( data , request , response ) ; }",1
"public void KSBHKCX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 8ISI44FG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 1E0LT4ZG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data , request , response ) ; }",0
"private String 6OOSR5JSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; return data ; }",1
"public void CYYE8QD ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String NVNHGEIG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void T3ZLEM8G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = goodG2BSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void DPAV4FX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void SCNHHQ4Sink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void JDAAB0V ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; dataBad = data ; badSink ( request , response ) ; }",1
"public void ZWWK6NY ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 7VKLDJQG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void QG04PVMG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; }",0
"public void 38U0GZS ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_51b ( ) ) . badSink ( data , request , response ) ; }",1
"public void CA1DAJS ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void WH5HN7OG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_51b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 1A8GVA8Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void I0NSHHTG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void YZLBRPT ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_52b ( ) ) . badSink ( data , request , response ) ; }",1
"public void V6HJ7KU ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void ULHX69VG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_52b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 8B5HNTCSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_52c ( ) ) . badSink ( data , request , response ) ; }",1
"public void MPCBZT9G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_52c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 1DUIB58Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void BJIBLUQG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 2TTO41W ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_53b ( ) ) . badSink ( data , request , response ) ; }",1
"public void TAS01H5 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void TPRTG59G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_53b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void B9MZHLSSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_53c ( ) ) . badSink ( data , request , response ) ; }",1
"public void QHK1QQ9G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_53c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void H9M8HSSSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_53d ( ) ) . badSink ( data , request , response ) ; }",1
"public void DL3JHQDG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_53d ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void VTFPU5WSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void BCHU1GTG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void UW26WDT ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_54b ( ) ) . badSink ( data , request , response ) ; }",1
"public void 36F9V4C ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 6K22OHPG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_54b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void W20GIXVSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_54c ( ) ) . badSink ( data , request , response ) ; }",1
"public void 23Q5YPIG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_54c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 8QNZHIQSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_54d ( ) ) . badSink ( data , request , response ) ; }",1
"public void 6FWURV3G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_54d ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 3FW0M92Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_54e ( ) ) . badSink ( data , request , response ) ; }",1
"public void JGU8B6TG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_54e ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 4CWURUMSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void GLYXI1AG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 2FZF8IV ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_61b ( ) ) . badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void U7FM320 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 8SAWFSYG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_61b ( ) ) . goodG2BSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String NRXTTH1Source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; return data ; }",1
"public String HRYUHSNG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void ZCZ2VOW ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_66b ( ) ) . badSink ( dataArray , request , response ) ; }",1
"public void M6V17AV ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 3XW9DTWG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_66b ( ) ) . goodG2BSink ( dataArray , request , response ) ; }",0
"public void RRU2YVVSink ( String dataArray [ ] , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void XOLCMD8G2BSink ( String dataArray [ ] , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void KMBG3UH ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_67b ( ) ) . badSink ( dataContainer , request , response ) ; }",1
"public void TG1TISU ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 54ASCCAG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_67b ( ) ) . goodG2BSink ( dataContainer , request , response ) ; }",0
"public void 1YJ5REYSink ( CWE36_Absolute_Path_Traversal__getParameter_Servlet_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void K0CYEJTG2BSink ( CWE36_Absolute_Path_Traversal__getParameter_Servlet_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void IU7ZY0U ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { data = request . getParameter ( ""name"" ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_68b ( ) ) . badSink ( request , response ) ; }",1
"public void JSLYRVR ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void P101IOTG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_68b ( ) ) . goodG2BSink ( request , response ) ; }",0
"public void CDTZFDCSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__getParameter_Servlet_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 321KUI0G2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__getParameter_Servlet_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void H2KHLJ3 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_71b ( ) ) . badSink ( ( Object ) data , request , response ) ; }",1
"public void J776F8Q ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void HZOZZNKG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_71b ( ) ) . goodG2BSink ( ( Object ) data , request , response ) ; }",0
"public void IHB7Y1YSink ( Object dataObject , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void EFZGPBXG2BSink ( Object dataObject , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void IXKLIBM ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_72b ( ) ) . badSink ( dataVector , request , response ) ; }",1
"public void AP1S2UO ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 7I2HIMQG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_72b ( ) ) . goodG2BSink ( dataVector , request , response ) ; }",0
"public void U6SKKPXSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 1A3ZM7HG2BSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void QXAHUSD ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_73b ( ) ) . badSink ( dataLinkedList , request , response ) ; }",1
"public void Y9JEM0T ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void MTSAF20G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_73b ( ) ) . goodG2BSink ( dataLinkedList , request , response ) ; }",0
"public void 3S0MQJ6Sink ( LinkedList < String > dataLinkedList , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void JXNELIWG2BSink ( LinkedList < String > dataLinkedList , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void Z96KL6X ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_74b ( ) ) . badSink ( dataHashMap , request , response ) ; }",1
"public void QLW4H8F ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void AGVXXT6G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_74b ( ) ) . goodG2BSink ( dataHashMap , request , response ) ; }",0
"public void JIRTSHVSink ( HashMap < Integer , String > dataHashMap , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void FRIR35VG2BSink ( HashMap < Integer , String > dataHashMap , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 7O9XRPL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_75b ( ) ) . badSink ( dataSerialized , request , response ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
"public void YFAIULP ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void GOG8ZCJG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__getParameter_Servlet_75b ( ) ) . goodG2BSink ( dataSerialized , request , response ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void P3ZR27LSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void 5TZZB3FG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void ZPKOZCU ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = request . getParameter ( ""name"" ) ; CWE36_Absolute_Path_Traversal__getParameter_Servlet_81_base baseObject = new CWE36_Absolute_Path_Traversal__getParameter_Servlet_81_bad ( ) ; baseObject . action ( data , request , response ) ; }",1
"public void BK8UBVY ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void Q9MQIAKG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__getParameter_Servlet_81_base baseObject = new CWE36_Absolute_Path_Traversal__getParameter_Servlet_81_goodG2B ( ) ; baseObject . action ( data , request , response ) ; }",0
"public void 5MDSGGV ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void PK6ZO9N ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void GJ8IT8VG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 1QQ47B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( true ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void QX7X3F7G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void R18UR7GG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void RREMWWD ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void SYDC3D5 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 == 5 ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void BMRU6RJG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void YAYH1NAG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void ZMRGR8G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 2SAPK1T ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void DX8ET8SG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void XDVC5Y4G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void TUL0VSC ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void JPL1XQC ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateTrue ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void Z0PJ42NG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void NNQO9P6G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void CXGCC20 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void MQGDY21 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void EF7E0YFG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void GGEFZX7G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 5JUACVQ ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void IYPL0QP ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive == 5 ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void FBEUHJ6G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void TZOALX5G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void AFPMH9Q ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void FF3STM4 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void ZJZR80UG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void AJLOQI7G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void N0T4C13 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void WMHKYT9 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void TAG1K07G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void M0COLHJG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void GGFTM3N ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void R0WQLJU ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void E5MY088G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void GB4S13AG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void O700R59 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void IUDRSLL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void PWGUZ98G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 85K0NVMG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void XNBHUEC ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 7I2QIIU ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 3LI0DMMG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 8K2MPDH ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void OUNKWQL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void CAFG0NTG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void CJTNHZKG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void LDWC658 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void JYLCJNM ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void XLYCXYXG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void E24EUDMG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void FBHTAXW ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void SKG82TT ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 86MN91SG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 36YH1SCG2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void P0PUFFN ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"public void 7TYIGL7 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; while ( true ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void FUX1845G2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 5L8LA9K ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void BSC3VG0 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void IG0WVJLG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"public void J3CYPA4 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"public void X6OU4M5 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String HVDYYQM_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( badPrivate ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } return data ; }",1
"public void 9SF3JY0 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"private void Y4NLLM2G2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String 92UNOY0G2B1_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void USJ0ON2G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String Z4P2TJ5G2B2_source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void PXI6RL5 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_22b ( ) ) . badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 0GAJAO7 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B1 ( request , response ) ; goodG2B2 ( request , response ) ; }",0
"private void QEOZHGDG2B1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_22b ( ) ) . goodG2B1Source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void VBGCHZ9G2B2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_22b ( ) ) . goodG2B2Source ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 4MJZUMJSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getQueryString_Servlet_22a . badPublicStatic ) { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } } else { data = null ; } return data ; }",1
"public String 2LZI17FG2B1Source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getQueryString_Servlet_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String LIZUZQLG2B2Source ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__getQueryString_Servlet_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void PB0HMXL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String dataCopy ; { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"public void Q2UCS3A ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 7EXZDVGG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void 5QP6I73Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 14G3IYY ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } badSink ( data , request , response ) ; }",1
"public void LM8CLE2 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void BALC432G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 5DOMM3RG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data , request , response ) ; }",0
"private String HI8Z87ASource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } return data ; }",1
"public void CNITHBK ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String 172ZPRNG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void BHI2ADVG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = goodG2BSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 6ZMNPJL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void HLWI796Sink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void FE8J30O ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } dataBad = data ; badSink ( request , response ) ; }",1
"public void VUZNNQX ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void KKDQIT3G2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void Y5AL51PG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; }",0
"public void D3Q1U5B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_51b ( ) ) . badSink ( data , request , response ) ; }",1
"public void WB5IRM1 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void Y1VD6SYG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_51b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 2ZSKZK2Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void JCB4LJBG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void DEFZCCP ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_52b ( ) ) . badSink ( data , request , response ) ; }",1
"public void VKK5MYN ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 8LQVIZWG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_52b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 8QYPBRRSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_52c ( ) ) . badSink ( data , request , response ) ; }",1
"public void UIC0PZNG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_52c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void X3JQG1ISink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void QMD8HKAG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void YZ6B1O7 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_53b ( ) ) . badSink ( data , request , response ) ; }",1
"public void 7YJEZJM ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void GAC8G2OG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_53b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void R0TT8N5Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_53c ( ) ) . badSink ( data , request , response ) ; }",1
"public void 038CES6G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_53c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void S4SX44USink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_53d ( ) ) . badSink ( data , request , response ) ; }",1
"public void 16AQ8OLG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_53d ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 3G5ZC7MSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 65UZLP6G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void K95DLWA ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_54b ( ) ) . badSink ( data , request , response ) ; }",1
"public void 2RVTDPE ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void DIY505TG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_54b ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void O9G5X7MSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_54c ( ) ) . badSink ( data , request , response ) ; }",1
"public void K1MG45TG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_54c ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void IQHQJE2Sink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_54d ( ) ) . badSink ( data , request , response ) ; }",1
"public void 7T36M78G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_54d ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void RDNF72HSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_54e ( ) ) . badSink ( data , request , response ) ; }",1
"public void MMQTM4BG2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_54e ( ) ) . goodG2BSink ( data , request , response ) ; }",0
"public void 870K9TQSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void DO9QJ71G2BSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void F2FJYFM ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_61b ( ) ) . badSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 6HLXBE3 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void VZTESQSG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_61b ( ) ) . goodG2BSource ( request , response ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String O6PP3FVSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } return data ; }",1
"public String GJ1K38VG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void NEX9KNA ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_66b ( ) ) . badSink ( dataArray , request , response ) ; }",1
"public void S84PZ3R ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 5Y6RLDKG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_66b ( ) ) . goodG2BSink ( dataArray , request , response ) ; }",0
"public void 4UNRIY3Sink ( String dataArray [ ] , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void MRMGNSZG2BSink ( String dataArray [ ] , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 3DLO0A4 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_67b ( ) ) . badSink ( dataContainer , request , response ) ; }",1
"public void 29WC4JL ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void QOS23MGG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_67b ( ) ) . goodG2BSink ( dataContainer , request , response ) ; }",0
"public void 2AEXV0WSink ( CWE36_Absolute_Path_Traversal__getQueryString_Servlet_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void MMA54QWG2BSink ( CWE36_Absolute_Path_Traversal__getQueryString_Servlet_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void X5Z4QK8 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_68b ( ) ) . badSink ( request , response ) ; }",1
"public void 2JS8TSN ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void NKXKI3EG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_68b ( ) ) . goodG2BSink ( request , response ) ; }",0
"public void 2U2QEQSSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__getQueryString_Servlet_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void W3HQ06DG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__getQueryString_Servlet_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void MUIEKBG ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_71b ( ) ) . badSink ( ( Object ) data , request , response ) ; }",1
"public void Y6PCENT ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 8IO2FWKG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_71b ( ) ) . goodG2BSink ( ( Object ) data , request , response ) ; }",0
"public void WNMPEQYSink ( Object dataObject , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void LCEMAUGG2BSink ( Object dataObject , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 5QFSBMH ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_72b ( ) ) . badSink ( dataVector , request , response ) ; }",1
"public void 19WGKZ9 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void YLAG85KG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_72b ( ) ) . goodG2BSink ( dataVector , request , response ) ; }",0
"public void JTXM4QTSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void ZCKVK92G2BSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void S33TO54 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_73b ( ) ) . badSink ( dataLinkedList , request , response ) ; }",1
"public void 3KOIAP5 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 16G1YUHG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_73b ( ) ) . goodG2BSink ( dataLinkedList , request , response ) ; }",0
"public void JCNILVXSink ( LinkedList < String > dataLinkedList , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void MEHGVAMG2BSink ( LinkedList < String > dataLinkedList , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void JPZBCII ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_74b ( ) ) . badSink ( dataHashMap , request , response ) ; }",1
"public void 5G2FHFH ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void UBN81FHG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_74b ( ) ) . goodG2BSink ( dataHashMap , request , response ) ; }",0
"public void GMOIL3QSink ( HashMap < Integer , String > dataHashMap , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void XACOXX8G2BSink ( HashMap < Integer , String > dataHashMap , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void XO8V2F0 ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_75b ( ) ) . badSink ( dataSerialized , request , response ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
"public void ZYL1JLV ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void OWHQ4TTG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_75b ( ) ) . goodG2BSink ( dataSerialized , request , response ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void DQ9MCI7Sink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void HG4S2RKG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void 9LSB52Z ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = """" ; { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , ""&"" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( ""id="" ) ) { data = token . substring ( 3 ) ; break ; } } } CWE36_Absolute_Path_Traversal__getQueryString_Servlet_81_base baseObject = new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_81_bad ( ) ; baseObject . action ( data , request , response ) ; }",1
"public void YB11U3O ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; }",0
"private void 3AZBV3KG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__getQueryString_Servlet_81_base baseObject = new CWE36_Absolute_Path_Traversal__getQueryString_Servlet_81_goodG2B ( ) ; baseObject . action ( data , request , response ) ; }",0
"public void 7U0MSHG ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void H8D18W6 ( ) throws Throwable { goodG2B ( ) ; },0
"private void DHWHFKMG2B ( ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void H10VUMI ( ) throws Throwable { String data ; if ( true ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 90IHM4LG2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void YJMRRB3G2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 8206BNS ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void SPBRU2E ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 3VK7FH2G2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void IGBG46SG2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void OZ4EIF0 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void EFQNFAG ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void Y3RPTG2G2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void DQE3M7GG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 7F2E7AK ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void WJKGY6U ( ) throws Throwable { String data ; if ( privateTrue ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 5IXIY3DG2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void BBNHI9SG2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void PUEG96R ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void D5SA32O ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 1TOHPTTG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void U5ZZ51CG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void XN44KB1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void O4SFG2O ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void DDWRQWAG2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void KCPV3R4G2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 4JEJHKL ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void WKE2OKM ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 13M4SF8G2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void S27XBCEG2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 767BNSM ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 6GCK5IE ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void IQCJ66GG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void XLVZK0ZG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void KVZYF9W ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void DZV2SL7 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void F2BNNQWG2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void SDLYYHJG2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void BI9RQID ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void TB9HPVW ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void CM2GMAGG2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void N4HZXJJG2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void R1THS7J ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void VAONDD5 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 6AYME0RG2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void HXAY0J7 ( ) throws Throwable { goodG2B ( ) ; },0
"public void 3FJ90R4 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 2B0G26LG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void BKST5PKG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void SQ22N7J ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void NQ7KOE5 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void KE6SYTWG2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void WPRVCKSG2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void HQ8A1W3 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void BX7PEF0 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void U3HI4J7G2B1 ( ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 2GPETOYG2B2 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void O182W0P ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 9PVVV9G ( ) throws Throwable { String data ; while ( true ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 3X9P698G2B ( ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void V09X9HJ ( ) throws Throwable { goodG2B ( ) ; },0
"public void TND5YM2 ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void 9IMX1N6G2B ( ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
public void Y98JNAH ( ) throws Throwable { goodG2B ( ) ; },0
"public void 1P17B81 ( ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String 96XJ2ER_source ( ) throws Throwable { String data ; if ( badPrivate ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
public void JPV9TI1 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void 2QRP448G2B1 ( ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String 1CFPJLQG2B1_source ( ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void 5XUNMNVG2B2 ( ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String 0YLL1BRG2B2_source ( ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void ONTRA0M ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__listen_tcp_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 2CRAY1H ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void F7OZ6SHG2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__listen_tcp_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 36T1XZZG2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__listen_tcp_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 1ERVO31Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__listen_tcp_22a . badPublicStatic ) { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
"public String WJ3TJERG2B1Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__listen_tcp_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String DE3BS8UG2B2Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__listen_tcp_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void YRS536T ( ) throws Throwable { String dataCopy ; { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
public void 3EEUZMB ( ) throws Throwable { goodG2B ( ) ; },0
"private void OIF3E4JG2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void FJU8R07Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 2PN4Y73 ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } badSink ( data ) ; }",1
public void OLFBGNF ( ) throws Throwable { goodG2B ( ) ; },0
"private void 9ISVR60G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void OAUJZLWG2B ( ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data ) ; }",0
"private String 8BBBENLSource ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return data ; }",1
"public void 2DX24R8 ( ) throws Throwable { String data = badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String ECVIVHTG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void 1RVWJQQG2B ( ) throws Throwable { String data = goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 86VU4QX ( ) throws Throwable { goodG2B ( ) ; },0
"private void 6GOM8VJSink ( ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 3CP0C88 ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } dataBad = data ; badSink ( ) ; }",1
public void GC5RSE9 ( ) throws Throwable { goodG2B ( ) ; },0
"private void MMBURG9G2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void PWQ8ANLG2B ( ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"public void K366TFO ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__listen_tcp_51b ( ) ) . badSink ( data ) ; }",1
public void 7R8PDON ( ) throws Throwable { goodG2B ( ) ; },0
"private void VC9HKGSG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_51b ( ) ) . goodG2BSink ( data ) ; }",0
"public void VXACXD4Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void KCM0MWBG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 080GA6Q ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__listen_tcp_52b ( ) ) . badSink ( data ) ; }",1
public void A4DH3PP ( ) throws Throwable { goodG2B ( ) ; },0
"private void V4AAFXVG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_52b ( ) ) . goodG2BSink ( data ) ; }",0
public void VIO0U65Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_52c ( ) ) . badSink ( data ) ; },1
public void 24CKFKIG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void 9TLQMYOSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void GITE8MPG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 8VVCVP4 ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__listen_tcp_53b ( ) ) . badSink ( data ) ; }",1
public void 4A8HQ2B ( ) throws Throwable { goodG2B ( ) ; },0
"private void 5CB19U9G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_53b ( ) ) . goodG2BSink ( data ) ; }",0
public void 0A7JVZ4Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_53c ( ) ) . badSink ( data ) ; },1
public void OHVEBQ6G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_53c ( ) ) . goodG2BSink ( data ) ; },0
public void LTGUHMKSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_53d ( ) ) . badSink ( data ) ; },1
public void 21S5I41G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void FGT4QDNSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void RK2IMUBG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void BX8SA3E ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__listen_tcp_54b ( ) ) . badSink ( data ) ; }",1
public void PV20CDH ( ) throws Throwable { goodG2B ( ) ; },0
"private void G2MLLRFG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_54b ( ) ) . goodG2BSink ( data ) ; }",0
public void PNWIRPJSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_54c ( ) ) . badSink ( data ) ; },1
public void CR49UKKG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_54c ( ) ) . goodG2BSink ( data ) ; },0
public void TYG1RAGSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_54d ( ) ) . badSink ( data ) ; },1
public void TADCY9IG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_54d ( ) ) . goodG2BSink ( data ) ; },0
public void 58SQM9MSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_54e ( ) ) . badSink ( data ) ; },1
public void JAE3ROVG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__listen_tcp_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void 5I8XJHGSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void P3L59UTG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void V81HL5D ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__listen_tcp_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void T7VGVZM ( ) throws Throwable { goodG2B ( ) ; },0
"private void EPV7JW1G2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__listen_tcp_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 4A4HZSYSource ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } return data ; }",1
"public String SD0XMG2G2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void HD8O2F0 ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_66b ( ) ) . badSink ( dataArray ) ; }",1
public void QMIIRCM ( ) throws Throwable { goodG2B ( ) ; },0
"private void Z5X280AG2B ( ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"public void 5FJEB4CSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 5M26YAIG2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void RAFRYR5 ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void 8AQUAHX ( ) throws Throwable { goodG2B ( ) ; },0
"private void 9KSJJFWG2B ( ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"public void R42V10OSink ( CWE36_Absolute_Path_Traversal__listen_tcp_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 1UMS630G2BSink ( CWE36_Absolute_Path_Traversal__listen_tcp_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 3XXIKCI ( ) throws Throwable { data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__listen_tcp_68b ( ) ) . badSink ( ) ; }",1
public void M5PALLR ( ) throws Throwable { goodG2B ( ) ; },0
"private void UPMPXGBG2B ( ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_68b ( ) ) . goodG2BSink ( ) ; }",0
"public void BXWIET2Sink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__listen_tcp_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void JC8AXJ1G2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__listen_tcp_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 0HOJTIX ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__listen_tcp_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void 4C3OFZ5 ( ) throws Throwable { goodG2B ( ) ; },0
"private void K146HZQG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"public void 6C9JXS3Sink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 3KC5YGYG2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void ZDD4N1V ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_72b ( ) ) . badSink ( dataVector ) ; }",1
public void 2ADR9HB ( ) throws Throwable { goodG2B ( ) ; },0
"private void 86Q22EEG2B ( ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"public void CKIIZNSSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 8Q3S7UQG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 0OFKRIA ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void S08UI34 ( ) throws Throwable { goodG2B ( ) ; },0
"private void RYVB9DZG2B ( ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"public void COGWF57Sink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void F24HYGTG2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void UBKEA7O ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void 42EJ3VX ( ) throws Throwable { goodG2B ( ) ; },0
"private void X56ZKSJG2B ( ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"public void IOSHYLTSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void E3G0JP1G2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void JYZCL2Q ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void WHAY06V ( ) throws Throwable { goodG2B ( ) ; },0
"private void 4L5MYLAG2B ( ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__listen_tcp_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void M5IJN8VSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void TVS8IXEG2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void IBH9XX0 ( ) throws Throwable { String data ; data = """" ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , ""UTF-8"" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( socket != null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing Socket"" , exceptIO ) ; } try { if ( listener != null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ServerSocket"" , exceptIO ) ; } } } CWE36_Absolute_Path_Traversal__listen_tcp_81_base baseObject = new CWE36_Absolute_Path_Traversal__listen_tcp_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void A87OXKD ( ) throws Throwable { goodG2B ( ) ; },0
"private void 8DJVJHKG2B ( ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__listen_tcp_81_base baseObject = new CWE36_Absolute_Path_Traversal__listen_tcp_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"public void FDEF18W ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void OXQ0LZ4 ( ) throws Throwable { goodG2B ( ) ; },0
"private void 979SFAOG2B ( ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void IRVZFXF ( ) throws Throwable { String data ; if ( true ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 0KVOOAJG2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void L0PUB93G2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 2OY0ZUZ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void OE01QC3 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void HX7CNMPG2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void R5QAYAZG2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void HSZRMJY ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 1RYU2EH ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 2ZME75UG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 54E8LN7G2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void X5IZ32U ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void IHPT6KM ( ) throws Throwable { String data ; if ( privateTrue ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void LPA1J5VG2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 3Y5KEEGG2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void BOR9A6C ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 3W2WTEY ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void OTDD1JFG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void V0PO989G2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 5KAPR44 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void W1YSKKF ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void AMY3U3JG2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void PI7MAVOG2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void ODY4OX8 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void SZHWL7K ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 1B6IHFLG2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 8DXIM3HG2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void YWUMZDV ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 9WC6M89 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void AEWA8ZOG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void CIQQDWQG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void MOGPAOK ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void IZCMDIT ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void GVO33J0G2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void K87LJJVG2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void L5N6ECD ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 62KHX5A ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void A00VLWQG2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void IRION77G2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void G22FSFB ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void CXWM8VS ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void J0JCV66G2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 96SI1Z1 ( ) throws Throwable { goodG2B ( ) ; },0
"public void QDTAIEG ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void EQ8KSA8G2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 7NSW69AG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void MB754VG ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 56M6HQS ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void OIBFCEEG2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void YDP81NGG2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void S48YXP5 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void ER7LH4B ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void HCR3ISSG2B1 ( ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void A7UMERSG2B2 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 5YTHDRP ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void OSR8UZL ( ) throws Throwable { String data ; while ( true ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 816TYURG2B ( ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 0JGK8RM ( ) throws Throwable { goodG2B ( ) ; },0
"public void TM0OFK4 ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void 490WYBSG2B ( ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
public void 9HUCQSC ( ) throws Throwable { goodG2B ( ) ; },0
"public void IBLNXG0 ( ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String JI2JRQ6_source ( ) throws Throwable { String data ; if ( badPrivate ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
public void 4OMU6K3 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void 52GQNHRG2B1 ( ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String 7P445YKG2B1_source ( ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void UEHJ7Q7G2B2 ( ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String U586IA3G2B2_source ( ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void ZXBIKRO ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__PropertiesFile_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 8JTSSOU ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void RARLSX8G2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__PropertiesFile_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void PXJTWKCG2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__PropertiesFile_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String MTSWU8HSource ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__PropertiesFile_22a . badPublicStatic ) { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } else { data = null ; } return data ; }",1
"public String KL3G79HG2B1Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__PropertiesFile_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String OFOTO4XG2B2Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__PropertiesFile_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void 0JLXGJO ( ) throws Throwable { String dataCopy ; { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
public void HQ6T4MM ( ) throws Throwable { goodG2B ( ) ; },0
"private void V0CJUE6G2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void PENGF2LSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void EJB36QV ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } badSink ( data ) ; }",1
public void RWLVXJJ ( ) throws Throwable { goodG2B ( ) ; },0
"private void ORO2ZLKG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 37OI4SNG2B ( ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data ) ; }",0
"private String JQGZLULSource ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } return data ; }",1
"public void IWMOEGB ( ) throws Throwable { String data = badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String GAU6TBMG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void V57X3DVG2B ( ) throws Throwable { String data = goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void VKFNSU1 ( ) throws Throwable { goodG2B ( ) ; },0
"private void 7MIPHQISink ( ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void CT9GTMT ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } dataBad = data ; badSink ( ) ; }",1
public void 59QIWN1 ( ) throws Throwable { goodG2B ( ) ; },0
"private void R17HZ3NG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void WBQ0PW8G2B ( ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"public void 6ZWQUVE ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__PropertiesFile_51b ( ) ) . badSink ( data ) ; }",1
public void UX6BYBU ( ) throws Throwable { goodG2B ( ) ; },0
"private void UM9JCLKG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_51b ( ) ) . goodG2BSink ( data ) ; }",0
"public void RNXMB7SSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void SYR75SZG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 4QFZZQ9 ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__PropertiesFile_52b ( ) ) . badSink ( data ) ; }",1
public void PNOHXE4 ( ) throws Throwable { goodG2B ( ) ; },0
"private void LVVW6FRG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_52b ( ) ) . goodG2BSink ( data ) ; }",0
public void 71K2ZOVSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_52c ( ) ) . badSink ( data ) ; },1
public void 67TB6Y8G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void UNK1FTBSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void HG7TA41G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 29D04W3 ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__PropertiesFile_53b ( ) ) . badSink ( data ) ; }",1
public void C4V6UKH ( ) throws Throwable { goodG2B ( ) ; },0
"private void 3JLUDUGG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_53b ( ) ) . goodG2BSink ( data ) ; }",0
public void 4BDNNMOSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_53c ( ) ) . badSink ( data ) ; },1
public void KV4BCXRG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_53c ( ) ) . goodG2BSink ( data ) ; },0
public void PEABNGQSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_53d ( ) ) . badSink ( data ) ; },1
public void HSEXVSYG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void C5GSB1RSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 9KUC9CDG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void U7IGGGF ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__PropertiesFile_54b ( ) ) . badSink ( data ) ; }",1
public void 7UI43PE ( ) throws Throwable { goodG2B ( ) ; },0
"private void 0ZD3H4PG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_54b ( ) ) . goodG2BSink ( data ) ; }",0
public void COY20EHSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_54c ( ) ) . badSink ( data ) ; },1
public void ZAPSX8DG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_54c ( ) ) . goodG2BSink ( data ) ; },0
public void QVVB4ASSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_54d ( ) ) . badSink ( data ) ; },1
public void KQMWKF2G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_54d ( ) ) . goodG2BSink ( data ) ; },0
public void IL65XAESink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_54e ( ) ) . badSink ( data ) ; },1
public void 8ESIBNXG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__PropertiesFile_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void 414Z99ISink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void FE5OD60G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void HC3ES7R ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__PropertiesFile_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 4XMISLE ( ) throws Throwable { goodG2B ( ) ; },0
"private void 5N2BUVEG2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__PropertiesFile_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 7134MURSource ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } return data ; }",1
"public String FCXYY2SG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void 54NL1M0 ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_66b ( ) ) . badSink ( dataArray ) ; }",1
public void RWOM67X ( ) throws Throwable { goodG2B ( ) ; },0
"private void 98JI4A5G2B ( ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"public void CK4K204Sink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void VLBZQZ8G2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void NOC8K98 ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void ESGJA8A ( ) throws Throwable { goodG2B ( ) ; },0
"private void 3I363L2G2B ( ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"public void PCZ6S7WSink ( CWE36_Absolute_Path_Traversal__PropertiesFile_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void OYC0VFJG2BSink ( CWE36_Absolute_Path_Traversal__PropertiesFile_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 0Y9WEWW ( ) throws Throwable { data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__PropertiesFile_68b ( ) ) . badSink ( ) ; }",1
public void NCN66BZ ( ) throws Throwable { goodG2B ( ) ; },0
"private void 8M9ORYPG2B ( ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_68b ( ) ) . goodG2BSink ( ) ; }",0
"public void 94WZGHQSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__PropertiesFile_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 6V32AAGG2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__PropertiesFile_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void TDE9DNA ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ( new CWE36_Absolute_Path_Traversal__PropertiesFile_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void MUCPTW7 ( ) throws Throwable { goodG2B ( ) ; },0
"private void I38V7OXG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"public void KVOCNTRSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 73ZI22TG2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void YN1WRU9 ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_72b ( ) ) . badSink ( dataVector ) ; }",1
public void TXAROAK ( ) throws Throwable { goodG2B ( ) ; },0
"private void RMQNJLBG2B ( ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"public void L4TAGKYSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void R93EDMCG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 0HQHUV6 ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void 7X7I562 ( ) throws Throwable { goodG2B ( ) ; },0
"private void M6IVVUNG2B ( ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"public void NJ9MZPMSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void XQC8PI5G2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void V4OOUQA ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void J14TBF9 ( ) throws Throwable { goodG2B ( ) ; },0
"private void E782H6MG2B ( ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"public void CW44VO8Sink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void TVBBNOPG2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void Z2MBXPK ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void 2T84FQV ( ) throws Throwable { goodG2B ( ) ; },0
"private void WRE6MBLG2B ( ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__PropertiesFile_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void 4EQXEHXSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void NYG9CPHG2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void RTNYZSL ( ) throws Throwable { String data ; data = """" ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( ""../common/config.properties"" ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( ""data"" ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } CWE36_Absolute_Path_Traversal__PropertiesFile_81_base baseObject = new CWE36_Absolute_Path_Traversal__PropertiesFile_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void SKJZQZ1 ( ) throws Throwable { goodG2B ( ) ; },0
"private void KVLTSEAG2B ( ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__PropertiesFile_81_base baseObject = new CWE36_Absolute_Path_Traversal__PropertiesFile_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"public void G2JAG5T ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void ZFV0IRP ( ) throws Throwable { goodG2B ( ) ; },0
"private void IXJMY3TG2B ( ) throws Throwable { String data ; data = ""foo"" ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void AP6IB0A ( ) throws Throwable { String data ; if ( true ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 816VYCMG2B1 ( ) throws Throwable { String data ; if ( false ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void AO5RMJ8G2B2 ( ) throws Throwable { String data ; if ( true ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 7FAVL3H ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void YYQG4IV ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 7HE5ZDCG2B1 ( ) throws Throwable { String data ; if ( 5 != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void DLUU482G2B2 ( ) throws Throwable { String data ; if ( 5 == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void P0OOQGD ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void KAX9PZZ ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 4L2PHUMG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void IYDKT9WG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void YY87UH4 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void LZ6BC2L ( ) throws Throwable { String data ; if ( privateTrue ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void EJVM7V9G2B1 ( ) throws Throwable { String data ; if ( privateFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void SBCUKAKG2B2 ( ) throws Throwable { String data ; if ( privateTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void SQLKJ12 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 703R9NH ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void SVM8ZTRG2B1 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 5UG8DZKG2B2 ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void LCA8DP2 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void UIARLXM ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void MCR635JG2B1 ( ) throws Throwable { String data ; if ( privateFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void VNCP35SG2B2 ( ) throws Throwable { String data ; if ( privateFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 2C5AX9I ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void U30RJL5 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void KOUHBDWG2B1 ( ) throws Throwable { String data ; if ( privateReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void M4J8P3FG2B2 ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void AGOW5XU ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 1JJVSLP ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void DMK8XO8G2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FALSE ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void WZFEWISG2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 398LZFN ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void PFA9NAL ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void F2B06VHG2B1 ( ) throws Throwable { String data ; if ( IO . staticFalse ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void HJDMYS2G2B2 ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 95CN2XC ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void QJNNWI6 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 6SXEFH3G2B1 ( ) throws Throwable { String data ; if ( IO . staticReturnsFalse ( ) ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void SARHFVPG2B2 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void POSOT6S ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void A5UY1A4 ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = System . getProperty ( ""user.home"" ) ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void RMLJM34G2B ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = ""foo"" ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void OWP1X7C ( ) throws Throwable { goodG2B ( ) ; },0
"public void QQOC1EE ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 8R41D1CG2B1 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void P0AP2M1G2B2 ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 70469I0 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void SM46PST ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void HV7P5QOG2B1 ( ) throws Throwable { String data ; if ( IO . staticFive != 5 ) { data = null ; } else { data = ""foo"" ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void 8O17HXEG2B2 ( ) throws Throwable { String data ; if ( IO . staticFive == 5 ) { data = ""foo"" ; } else { data = null ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void 990XD46 ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void 3ESZR42 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = System . getProperty ( ""user.home"" ) ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 0YL4OD6G2B1 ( ) throws Throwable { String data = null ; switch ( 5 ) { case 6 : data = null ; break ; default : data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void QGSP5FFG2B2 ( ) throws Throwable { String data = null ; switch ( 6 ) { case 6 : data = ""foo"" ; break ; default : data = null ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void ARNKNZZ ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"public void X6LRUY5 ( ) throws Throwable { String data ; while ( true ) { data = System . getProperty ( ""user.home"" ) ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private void 6WUQHASG2B ( ) throws Throwable { String data ; while ( true ) { data = ""foo"" ; break ; } if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void F3OPP7K ( ) throws Throwable { goodG2B ( ) ; },0
"public void 1SZ7S94 ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
"private void ZV41ELEG2B ( ) throws Throwable { String data ; data = ""foo"" ; for ( int i = 0 ; i < 1 ; i ++ ) { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
public void VCSAGGC ( ) throws Throwable { goodG2B ( ) ; },0
"public void 1QMUZ0Z ( ) throws Throwable { String data ; badPrivate = true ; data = bad_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String I8YL3SB_source ( ) throws Throwable { String data ; if ( badPrivate ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } return data ; }",1
public void 3SW3NAH ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void TO2FMI5G2B1 ( ) throws Throwable { String data ; goodG2B1_private = false ; data = goodG2B1_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String SMRDYAJG2B1_source ( ) throws Throwable { String data = null ; if ( goodG2B1_private ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"private void LGWK693G2B2 ( ) throws Throwable { String data ; goodG2B2_private = true ; data = goodG2B2_source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private String W8NXUKPG2B2_source ( ) throws Throwable { String data = null ; if ( goodG2B2_private ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void EQXRK75 ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__Property_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void DXV2M3Z ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void AC60HG0G2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__Property_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void YXJFORRG2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__Property_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 9PXX6HPSource ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__Property_22a . badPublicStatic ) { data = System . getProperty ( ""user.home"" ) ; } else { data = null ; } return data ; }",1
"public String G6DWQG8G2B1Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__Property_22a . goodG2B1PublicStatic ) { data = null ; } else { data = ""foo"" ; } return data ; }",0
"public String 2Z5YU5WG2B2Source ( ) throws Throwable { String data ; if ( CWE36_Absolute_Path_Traversal__Property_22a . goodG2B2PublicStatic ) { data = ""foo"" ; } else { data = null ; } return data ; }",0
"public void RUKTTUK ( ) throws Throwable { String dataCopy ; { String data ; data = System . getProperty ( ""user.home"" ) ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",1
public void DXQYIUL ( ) throws Throwable { goodG2B ( ) ; },0
"private void CEK5SZYG2B ( ) throws Throwable { String dataCopy ; { String data ; data = ""foo"" ; dataCopy = data ; } { String data = dataCopy ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } }",0
"private void POTOSU2Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void U3EY9OA ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; badSink ( data ) ; }",1
public void IXE2NXW ( ) throws Throwable { goodG2B ( ) ; },0
"private void IS9NIQQG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void UJI7FOLG2B ( ) throws Throwable { String data ; data = ""foo"" ; goodG2BSink ( data ) ; }",0
"private String 3RTMPY1Source ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; return data ; }",1
"public void 7H6PG6I ( ) throws Throwable { String data = badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"private String SPA26L8G2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"private void 21HGWEHG2B ( ) throws Throwable { String data = goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void N2VXK46 ( ) throws Throwable { goodG2B ( ) ; },0
"private void UMSJZNCSink ( ) throws Throwable { String data = dataBad ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void ZDU4DQQ ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; dataBad = data ; badSink ( ) ; }",1
public void SGKF28U ( ) throws Throwable { goodG2B ( ) ; },0
"private void 0IG6BNTG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void OZRQBYIG2B ( ) throws Throwable { String data ; data = ""foo"" ; dataGoodG2B = data ; goodG2BSink ( ) ; }",0
"public void 2VD7OAX ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; ( new CWE36_Absolute_Path_Traversal__Property_51b ( ) ) . badSink ( data ) ; }",1
public void WXP6IPN ( ) throws Throwable { goodG2B ( ) ; },0
"private void MHJCED7G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Property_51b ( ) ) . goodG2BSink ( data ) ; }",0
"public void EOPPNFDSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 5U1MOJMG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 8KSDBXD ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; ( new CWE36_Absolute_Path_Traversal__Property_52b ( ) ) . badSink ( data ) ; }",1
public void IO358YX ( ) throws Throwable { goodG2B ( ) ; },0
"private void 90AFOP5G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Property_52b ( ) ) . goodG2BSink ( data ) ; }",0
public void SSTAVFSSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_52c ( ) ) . badSink ( data ) ; },1
public void TR9610EG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void S7LWXHMSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void IN39D84G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 5WEGSVQ ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; ( new CWE36_Absolute_Path_Traversal__Property_53b ( ) ) . badSink ( data ) ; }",1
public void LPYQDT7 ( ) throws Throwable { goodG2B ( ) ; },0
"private void JMWTGN8G2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Property_53b ( ) ) . goodG2BSink ( data ) ; }",0
public void 4JZ5A79Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_53c ( ) ) . badSink ( data ) ; },1
public void VA5NH2PG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_53c ( ) ) . goodG2BSink ( data ) ; },0
public void 90QS437Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_53d ( ) ) . badSink ( data ) ; },1
public void 13YJ2ZHG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void 66BQDO3Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void IUCDVFXG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 30Q9D8J ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; ( new CWE36_Absolute_Path_Traversal__Property_54b ( ) ) . badSink ( data ) ; }",1
public void PAL658R ( ) throws Throwable { goodG2B ( ) ; },0
"private void FHUI2QZG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Property_54b ( ) ) . goodG2BSink ( data ) ; }",0
public void 4KLSJEASink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_54c ( ) ) . badSink ( data ) ; },1
public void YQB2N7ZG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_54c ( ) ) . goodG2BSink ( data ) ; },0
public void HA582RQSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_54d ( ) ) . badSink ( data ) ; },1
public void BZ70VXMG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_54d ( ) ) . goodG2BSink ( data ) ; },0
public void 8Q0UYI5Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_54e ( ) ) . badSink ( data ) ; },1
public void 3ESQY65G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__Property_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void 2BVI50SSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void DXSYH05G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 4A7WEBX ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__Property_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void X46QFR7 ( ) throws Throwable { goodG2B ( ) ; },0
"private void 6N0CS3EG2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__Property_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public String 95NYPP5Source ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; return data ; }",1
"public String N1BZ6ZGG2BSource ( ) throws Throwable { String data ; data = ""foo"" ; return data ; }",0
"public void D3RV30R ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__Property_66b ( ) ) . badSink ( dataArray ) ; }",1
public void RYJL0TC ( ) throws Throwable { goodG2B ( ) ; },0
"private void 26T5BK2G2B ( ) throws Throwable { String data ; data = ""foo"" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE36_Absolute_Path_Traversal__Property_66b ( ) ) . goodG2BSink ( dataArray ) ; }",0
"public void 0EMOL66Sink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void IDCS4UBG2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void DZOEBPO ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__Property_67b ( ) ) . badSink ( dataContainer ) ; }",1
public void ESHJSC4 ( ) throws Throwable { goodG2B ( ) ; },0
"private void QF49ZV7G2B ( ) throws Throwable { String data ; data = ""foo"" ; Container dataContainer = new Container ( ) ; dataContainer . containerOne = data ; ( new CWE36_Absolute_Path_Traversal__Property_67b ( ) ) . goodG2BSink ( dataContainer ) ; }",0
"public void NN04AQESink ( CWE36_Absolute_Path_Traversal__Property_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void MLR9AEPG2BSink ( CWE36_Absolute_Path_Traversal__Property_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void M236ZPV ( ) throws Throwable { data = System . getProperty ( ""user.home"" ) ; ( new CWE36_Absolute_Path_Traversal__Property_68b ( ) ) . badSink ( ) ; }",1
public void BR5AL2L ( ) throws Throwable { goodG2B ( ) ; },0
"private void 8MGUMDFG2B ( ) throws Throwable { data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Property_68b ( ) ) . goodG2BSink ( ) ; }",0
"public void S9CEUUMSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__Property_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 9E9VUDLG2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__Property_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void HSRWONN ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; ( new CWE36_Absolute_Path_Traversal__Property_71b ( ) ) . badSink ( ( Object ) data ) ; }",1
public void TOW0Y1E ( ) throws Throwable { goodG2B ( ) ; },0
"private void GW5XPIUG2B ( ) throws Throwable { String data ; data = ""foo"" ; ( new CWE36_Absolute_Path_Traversal__Property_71b ( ) ) . goodG2BSink ( ( Object ) data ) ; }",0
"public void E7YZYJESink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void YQ21NP1G2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SJMS6TB ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Property_72b ( ) ) . badSink ( dataVector ) ; }",1
public void PRTXYR1 ( ) throws Throwable { goodG2B ( ) ; },0
"private void WQ4NN0OG2B ( ) throws Throwable { String data ; data = ""foo"" ; Vector < String > dataVector = new Vector < String > ( 5 ) ; dataVector . add ( 0 , data ) ; dataVector . add ( 1 , data ) ; dataVector . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Property_72b ( ) ) . goodG2BSink ( dataVector ) ; }",0
"public void SYD4MA1Sink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void DMSQZSGG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void ZGXV0OO ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Property_73b ( ) ) . badSink ( dataLinkedList ) ; }",1
public void X79NA8I ( ) throws Throwable { goodG2B ( ) ; },0
"private void 6S2BDC0G2B ( ) throws Throwable { String data ; data = ""foo"" ; LinkedList < String > dataLinkedList = new LinkedList < String > ( ) ; dataLinkedList . add ( 0 , data ) ; dataLinkedList . add ( 1 , data ) ; dataLinkedList . add ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Property_73b ( ) ) . goodG2BSink ( dataLinkedList ) ; }",0
"public void QZG0RJDSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void G7WK43OG2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void AP8L1WQ ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Property_74b ( ) ) . badSink ( dataHashMap ) ; }",1
public void 8VGGEQ5 ( ) throws Throwable { goodG2B ( ) ; },0
"private void Y17Y4M9G2B ( ) throws Throwable { String data ; data = ""foo"" ; HashMap < Integer , String > dataHashMap = new HashMap < Integer , String > ( ) ; dataHashMap . put ( 0 , data ) ; dataHashMap . put ( 1 , data ) ; dataHashMap . put ( 2 , data ) ; ( new CWE36_Absolute_Path_Traversal__Property_74b ( ) ) . goodG2BSink ( dataHashMap ) ; }",0
"public void VBD2JUOSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void LSHWORAG2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SS9ZX1G ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__Property_75b ( ) ) . badSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",1
public void O98J0CC ( ) throws Throwable { goodG2B ( ) ; },0
"private void R5DEJJ3G2B ( ) throws Throwable { String data ; data = ""foo"" ; ByteArrayOutputStream streamByteArrayOutput = null ; ObjectOutput outputObject = null ; try { streamByteArrayOutput = new ByteArrayOutputStream ( ) ; outputObject = new ObjectOutputStream ( streamByteArrayOutput ) ; outputObject . writeObject ( data ) ; byte [ ] dataSerialized = streamByteArrayOutput . toByteArray ( ) ; ( new CWE36_Absolute_Path_Traversal__Property_75b ( ) ) . goodG2BSink ( dataSerialized ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in serialization"" , exceptIO ) ; } finally { try { if ( outputObject != null ) { outputObject . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectOutputStream"" , exceptIO ) ; } try { if ( streamByteArrayOutput != null ) { streamByteArrayOutput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayOutputStream"" , exceptIO ) ; } } }",0
"public void 0TBKRQFSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void 9TNVT79G2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
"public void 6K216QA ( ) throws Throwable { String data ; data = System . getProperty ( ""user.home"" ) ; CWE36_Absolute_Path_Traversal__Property_81_base baseObject = new CWE36_Absolute_Path_Traversal__Property_81_bad ( ) ; baseObject . action ( data ) ; }",1
public void 67QUO1Y ( ) throws Throwable { goodG2B ( ) ; },0
"private void X6LB8MWG2B ( ) throws Throwable { String data ; data = ""foo"" ; CWE36_Absolute_Path_Traversal__Property_81_base baseObject = new CWE36_Absolute_Path_Traversal__Property_81_goodG2B ( ) ; baseObject . action ( data ) ; }",0
"public void 9UHNPA7 ( ) throws Throwable { String data ; badPublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__URLConnection_22b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void MPP8EJA ( ) throws Throwable { goodG2B1 ( ) ; goodG2B2 ( ) ; },0
"private void T3AOIETG2B1 ( ) throws Throwable { String data ; goodG2B1PublicStatic = false ; data = ( new CWE36_Absolute_Path_Traversal__URLConnection_22b ( ) ) . goodG2B1Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"private void ELQ7VSMG2B2 ( ) throws Throwable { String data ; goodG2B2PublicStatic = true ; data = ( new CWE36_Absolute_Path_Traversal__URLConnection_22b ( ) ) . goodG2B2Source ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 2H9G14JSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void XSRAEB4G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void KP1C66YSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_52c ( ) ) . badSink ( data ) ; },1
public void U7RUJ76G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_52c ( ) ) . goodG2BSink ( data ) ; },0
"public void 11Q4PC1Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 28ZNFIVG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void OM8OI34Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_53c ( ) ) . badSink ( data ) ; },1
public void QNV0RD2G2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_53c ( ) ) . goodG2BSink ( data ) ; },0
public void Y79CUI0Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_53d ( ) ) . badSink ( data ) ; },1
public void QGXT17AG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_53d ( ) ) . goodG2BSink ( data ) ; },0
"public void PCSHN60Sink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void VPBEQN2G2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
public void O0KJEF4Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_54c ( ) ) . badSink ( data ) ; },1
public void N7Q4X1JG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_54c ( ) ) . goodG2BSink ( data ) ; },0
public void LUECBV7Sink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_54d ( ) ) . badSink ( data ) ; },1
public void 4TGDGCTG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_54d ( ) ) . goodG2BSink ( data ) ; },0
public void OLEQU0RSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_54e ( ) ) . badSink ( data ) ; },1
public void T15W7YJG2BSink ( String data ) throws Throwable { ( new CWE36_Absolute_Path_Traversal__URLConnection_54e ( ) ) . goodG2BSink ( data ) ; },0
"public void TPVZ9SYSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void ZOJR08XG2BSink ( String data ) throws Throwable { if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void H1F2KKT ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__URLConnection_61b ( ) ) . badSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
public void 1E95BGO ( ) throws Throwable { goodG2B ( ) ; },0
"private void P51QYEIG2B ( ) throws Throwable { String data = ( new CWE36_Absolute_Path_Traversal__URLConnection_61b ( ) ) . goodG2BSource ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void WQJ4SPVSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void NPPO330G2BSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void AEJ35UASink ( CWE36_Absolute_Path_Traversal__URLConnection_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void 34JTZ8CG2BSink ( CWE36_Absolute_Path_Traversal__URLConnection_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void 70GOBZ5Sink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__URLConnection_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void L1B4XPBG2BSink ( ) throws Throwable { String data = CWE36_Absolute_Path_Traversal__URLConnection_68a . data ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void TO1SU87Sink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void XRIXVM8G2BSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void SJFNHJASink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void Y623DNKG2BSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void AYMZCEMSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void U6LJT97G2BSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void AH49UASSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",1
"public void HUZQPKVG2BSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } }",0
"public void W2LG62ASink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",1
"public void QUSYK0NG2BSink ( byte [ ] dataSerialized ) throws Throwable { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data != null ) { File file = new File ( data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , ""UTF-8"" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error with stream reading"" , exceptIO ) ; } finally { try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing BufferedReader"" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing InputStreamReader"" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing FileInputStream"" , exceptIO ) ; } } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""IOException in deserialization"" , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , ""ClassNotFoundException in deserialization"" , exceptClassNotFound ) ; } finally { try { if ( streamObjectInput != null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ObjectInputStream"" , exceptIO ) ; } try { if ( streamByteArrayInput != null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , ""Error closing ByteArrayInputStream"" , exceptIO ) ; } } }",0
